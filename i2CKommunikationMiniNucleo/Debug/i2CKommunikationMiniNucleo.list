
i2CKommunikationMiniNucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d64  08002d64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d6c  08002d6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002d80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002d80  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000841d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015a8  00000000  00000000  00028451  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  00029a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000820  00000000  00000000  0002a2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010094  00000000  00000000  0002ab08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007ae7  00000000  00000000  0003ab9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006216b  00000000  00000000  00042683  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a47ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f68  00000000  00000000  000a486c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ce0 	.word	0x08002ce0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002ce0 	.word	0x08002ce0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	Adresse=0x01<<1;
 800043e:	4b16      	ldr	r3, [pc, #88]	; (8000498 <main+0x60>)
 8000440:	2202      	movs	r2, #2
 8000442:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000444:	f000 fa8e 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000448:	f000 f830 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800044c:	f000 f914 	bl	8000678 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000450:	f000 f8e2 	bl	8000618 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000454:	f000 f8a0 	bl	8000598 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TxData++;
 8000458:	4b10      	ldr	r3, [pc, #64]	; (800049c <main+0x64>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	3301      	adds	r3, #1
 800045e:	b2da      	uxtb	r2, r3
 8000460:	4b0e      	ldr	r3, [pc, #56]	; (800049c <main+0x64>)
 8000462:	701a      	strb	r2, [r3, #0]
	  rel=HAL_I2C_Master_Transmit(&hi2c1, Adresse, &TxData, 1, 100);
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <main+0x60>)
 8000466:	8819      	ldrh	r1, [r3, #0]
 8000468:	4a0c      	ldr	r2, [pc, #48]	; (800049c <main+0x64>)
 800046a:	480d      	ldr	r0, [pc, #52]	; (80004a0 <main+0x68>)
 800046c:	2364      	movs	r3, #100	; 0x64
 800046e:	9300      	str	r3, [sp, #0]
 8000470:	2301      	movs	r3, #1
 8000472:	f000 fdf9 	bl	8001068 <HAL_I2C_Master_Transmit>
 8000476:	0003      	movs	r3, r0
 8000478:	001a      	movs	r2, r3
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <main+0x6c>)
 800047c:	701a      	strb	r2, [r3, #0]
	  if(rel==HAL_OK){
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <main+0x6c>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d104      	bne.n	8000490 <main+0x58>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <main+0x70>)
 8000488:	2108      	movs	r1, #8
 800048a:	0018      	movs	r0, r3
 800048c:	f000 fd3b 	bl	8000f06 <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(200);
 8000490:	20c8      	movs	r0, #200	; 0xc8
 8000492:	f000 fad7 	bl	8000a44 <HAL_Delay>
	  TxData++;
 8000496:	e7df      	b.n	8000458 <main+0x20>
 8000498:	20000078 	.word	0x20000078
 800049c:	20000075 	.word	0x20000075
 80004a0:	20000028 	.word	0x20000028
 80004a4:	20000074 	.word	0x20000074
 80004a8:	50000400 	.word	0x50000400

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b099      	sub	sp, #100	; 0x64
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	242c      	movs	r4, #44	; 0x2c
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2334      	movs	r3, #52	; 0x34
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f002 fc07 	bl	8002cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c2:	2318      	movs	r3, #24
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	2314      	movs	r3, #20
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f002 fbff 	bl	8002cd0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d2:	003b      	movs	r3, r7
 80004d4:	0018      	movs	r0, r3
 80004d6:	2318      	movs	r3, #24
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f002 fbf8 	bl	8002cd0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e0:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <SystemClock_Config+0xe4>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a2b      	ldr	r2, [pc, #172]	; (8000594 <SystemClock_Config+0xe8>)
 80004e6:	401a      	ands	r2, r3
 80004e8:	4b29      	ldr	r3, [pc, #164]	; (8000590 <SystemClock_Config+0xe4>)
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	0109      	lsls	r1, r1, #4
 80004ee:	430a      	orrs	r2, r1
 80004f0:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f2:	0021      	movs	r1, r4
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2202      	movs	r2, #2
 80004f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2201      	movs	r2, #1
 80004fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2210      	movs	r2, #16
 8000504:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2202      	movs	r2, #2
 800050a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2200      	movs	r2, #0
 8000510:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	02d2      	lsls	r2, r2, #11
 8000518:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2280      	movs	r2, #128	; 0x80
 800051e:	03d2      	lsls	r2, r2, #15
 8000520:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	187b      	adds	r3, r7, r1
 8000524:	0018      	movs	r0, r3
 8000526:	f001 f8b7 	bl	8001698 <HAL_RCC_OscConfig>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800052e:	f000 f8f3 	bl	8000718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	2118      	movs	r1, #24
 8000534:	187b      	adds	r3, r7, r1
 8000536:	220f      	movs	r2, #15
 8000538:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2203      	movs	r2, #3
 800053e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2101      	movs	r1, #1
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fc18 	bl	8001d8c <HAL_RCC_ClockConfig>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000560:	f000 f8da 	bl	8000718 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000564:	003b      	movs	r3, r7
 8000566:	220a      	movs	r2, #10
 8000568:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800056a:	003b      	movs	r3, r7
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000570:	003b      	movs	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000576:	003b      	movs	r3, r7
 8000578:	0018      	movs	r0, r3
 800057a:	f001 fdeb 	bl	8002154 <HAL_RCCEx_PeriphCLKConfig>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000582:	f000 f8c9 	bl	8000718 <Error_Handler>
  }
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b019      	add	sp, #100	; 0x64
 800058c:	bd90      	pop	{r4, r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40007000 	.word	0x40007000
 8000594:	ffffe7ff 	.word	0xffffe7ff

08000598 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <MX_I2C1_Init+0x74>)
 800059e:	4a1c      	ldr	r2, [pc, #112]	; (8000610 <MX_I2C1_Init+0x78>)
 80005a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <MX_I2C1_Init+0x74>)
 80005a4:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <MX_I2C1_Init+0x7c>)
 80005a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_I2C1_Init+0x74>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_I2C1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_I2C1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_I2C1_Init+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_I2C1_Init+0x74>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f000 fcb1 	bl	8000f3c <HAL_I2C_Init>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005de:	f000 f89b 	bl	8000718 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_I2C1_Init+0x74>)
 80005e4:	2100      	movs	r1, #0
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 ffbe 	bl	8001568 <HAL_I2CEx_ConfigAnalogFilter>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005f0:	f000 f892 	bl	8000718 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <MX_I2C1_Init+0x74>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 f801 	bl	8001600 <HAL_I2CEx_ConfigDigitalFilter>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000602:	f000 f889 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000028 	.word	0x20000028
 8000610:	40005400 	.word	0x40005400
 8000614:	00707cbb 	.word	0x00707cbb

08000618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800061e:	4a15      	ldr	r2, [pc, #84]	; (8000674 <MX_USART2_UART_Init+0x5c>)
 8000620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000624:	22e1      	movs	r2, #225	; 0xe1
 8000626:	0252      	lsls	r2, r2, #9
 8000628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fea1 	bl	80023a4 <HAL_UART_Init>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000666:	f000 f857 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000007c 	.word	0x2000007c
 8000674:	40004400 	.word	0x40004400

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b089      	sub	sp, #36	; 0x24
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	240c      	movs	r4, #12
 8000680:	193b      	adds	r3, r7, r4
 8000682:	0018      	movs	r0, r3
 8000684:	2314      	movs	r3, #20
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f002 fb21 	bl	8002cd0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <MX_GPIO_Init+0x98>)
 8000690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000692:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_GPIO_Init+0x98>)
 8000694:	2104      	movs	r1, #4
 8000696:	430a      	orrs	r2, r1
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_GPIO_Init+0x98>)
 800069c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069e:	2204      	movs	r2, #4
 80006a0:	4013      	ands	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_GPIO_Init+0x98>)
 80006a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_GPIO_Init+0x98>)
 80006ac:	2101      	movs	r1, #1
 80006ae:	430a      	orrs	r2, r1
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_GPIO_Init+0x98>)
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	2201      	movs	r2, #1
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_GPIO_Init+0x98>)
 80006c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_GPIO_Init+0x98>)
 80006c4:	2102      	movs	r1, #2
 80006c6:	430a      	orrs	r2, r1
 80006c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_GPIO_Init+0x98>)
 80006cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ce:	2202      	movs	r2, #2
 80006d0:	4013      	ands	r3, r2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_GPIO_Init+0x9c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	2108      	movs	r1, #8
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fbf5 	bl	8000ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006e2:	0021      	movs	r1, r4
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2208      	movs	r2, #8
 80006e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2201      	movs	r2, #1
 80006ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	4a05      	ldr	r2, [pc, #20]	; (8000714 <MX_GPIO_Init+0x9c>)
 8000700:	0019      	movs	r1, r3
 8000702:	0010      	movs	r0, r2
 8000704:	f000 fa74 	bl	8000bf0 <HAL_GPIO_Init>

}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	b009      	add	sp, #36	; 0x24
 800070e:	bd90      	pop	{r4, r7, pc}
 8000710:	40021000 	.word	0x40021000
 8000714:	50000400 	.word	0x50000400

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <HAL_MspInit+0x24>)
 800072a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_MspInit+0x24>)
 800072e:	2101      	movs	r1, #1
 8000730:	430a      	orrs	r2, r1
 8000732:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <HAL_MspInit+0x24>)
 8000736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <HAL_MspInit+0x24>)
 800073a:	2180      	movs	r1, #128	; 0x80
 800073c:	0549      	lsls	r1, r1, #21
 800073e:	430a      	orrs	r2, r1
 8000740:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	230c      	movs	r3, #12
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	0018      	movs	r0, r3
 800075a:	2314      	movs	r3, #20
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f002 fab6 	bl	8002cd0 <memset>
  if(hi2c->Instance==I2C1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a18      	ldr	r2, [pc, #96]	; (80007cc <HAL_I2C_MspInit+0x80>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d12a      	bne.n	80007c4 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <HAL_I2C_MspInit+0x84>)
 8000770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_I2C_MspInit+0x84>)
 8000774:	2101      	movs	r1, #1
 8000776:	430a      	orrs	r2, r1
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_I2C_MspInit+0x84>)
 800077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077e:	2201      	movs	r2, #1
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000786:	210c      	movs	r1, #12
 8000788:	187b      	adds	r3, r7, r1
 800078a:	22c0      	movs	r2, #192	; 0xc0
 800078c:	00d2      	lsls	r2, r2, #3
 800078e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2212      	movs	r2, #18
 8000794:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2201      	movs	r2, #1
 800079a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2203      	movs	r2, #3
 80007a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	187a      	adds	r2, r7, r1
 80007aa:	23a0      	movs	r3, #160	; 0xa0
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fa1d 	bl	8000bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_I2C_MspInit+0x84>)
 80007b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_I2C_MspInit+0x84>)
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	0389      	lsls	r1, r1, #14
 80007c0:	430a      	orrs	r2, r1
 80007c2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b008      	add	sp, #32
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40005400 	.word	0x40005400
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	230c      	movs	r3, #12
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	0018      	movs	r0, r3
 80007e2:	2314      	movs	r3, #20
 80007e4:	001a      	movs	r2, r3
 80007e6:	2100      	movs	r1, #0
 80007e8:	f002 fa72 	bl	8002cd0 <memset>
  if(huart->Instance==USART2)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a18      	ldr	r2, [pc, #96]	; (8000854 <HAL_UART_MspInit+0x80>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d129      	bne.n	800084a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_UART_MspInit+0x84>)
 80007f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <HAL_UART_MspInit+0x84>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0289      	lsls	r1, r1, #10
 8000800:	430a      	orrs	r2, r1
 8000802:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <HAL_UART_MspInit+0x84>)
 8000806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <HAL_UART_MspInit+0x84>)
 800080a:	2101      	movs	r1, #1
 800080c:	430a      	orrs	r2, r1
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_UART_MspInit+0x84>)
 8000812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000814:	2201      	movs	r2, #1
 8000816:	4013      	ands	r3, r2
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800081c:	210c      	movs	r1, #12
 800081e:	187b      	adds	r3, r7, r1
 8000820:	4a0e      	ldr	r2, [pc, #56]	; (800085c <HAL_UART_MspInit+0x88>)
 8000822:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2202      	movs	r2, #2
 8000828:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2203      	movs	r2, #3
 8000834:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2204      	movs	r2, #4
 800083a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	187a      	adds	r2, r7, r1
 800083e:	23a0      	movs	r3, #160	; 0xa0
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f000 f9d3 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b008      	add	sp, #32
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40004400 	.word	0x40004400
 8000858:	40021000 	.word	0x40021000
 800085c:	00008004 	.word	0x00008004

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 f8c0 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <SystemInit+0x64>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <SystemInit+0x64>)
 800089e:	2180      	movs	r1, #128	; 0x80
 80008a0:	0049      	lsls	r1, r1, #1
 80008a2:	430a      	orrs	r2, r1
 80008a4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <SystemInit+0x64>)
 80008a8:	68da      	ldr	r2, [r3, #12]
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <SystemInit+0x64>)
 80008ac:	4913      	ldr	r1, [pc, #76]	; (80008fc <SystemInit+0x68>)
 80008ae:	400a      	ands	r2, r1
 80008b0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <SystemInit+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <SystemInit+0x64>)
 80008b8:	4911      	ldr	r1, [pc, #68]	; (8000900 <SystemInit+0x6c>)
 80008ba:	400a      	ands	r2, r1
 80008bc:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <SystemInit+0x64>)
 80008c0:	689a      	ldr	r2, [r3, #8]
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <SystemInit+0x64>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	438a      	bics	r2, r1
 80008c8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <SystemInit+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <SystemInit+0x64>)
 80008d0:	490c      	ldr	r1, [pc, #48]	; (8000904 <SystemInit+0x70>)
 80008d2:	400a      	ands	r2, r1
 80008d4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <SystemInit+0x64>)
 80008d8:	68da      	ldr	r2, [r3, #12]
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <SystemInit+0x64>)
 80008dc:	490a      	ldr	r1, [pc, #40]	; (8000908 <SystemInit+0x74>)
 80008de:	400a      	ands	r2, r1
 80008e0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <SystemInit+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <SystemInit+0x78>)
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	0512      	lsls	r2, r2, #20
 80008ee:	609a      	str	r2, [r3, #8]
#endif
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	40021000 	.word	0x40021000
 80008fc:	88ff400c 	.word	0x88ff400c
 8000900:	fef6fff6 	.word	0xfef6fff6
 8000904:	fffbffff 	.word	0xfffbffff
 8000908:	ff02ffff 	.word	0xff02ffff
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000912:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000914:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000916:	e003      	b.n	8000920 <LoopCopyDataInit>

08000918 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800091a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800091c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800091e:	3104      	adds	r1, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000920:	480b      	ldr	r0, [pc, #44]	; (8000950 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000924:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000926:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000928:	d3f6      	bcc.n	8000918 <CopyDataInit>
  ldr  r2, =_sbss
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <LoopForever+0x12>)
  b  LoopFillZerobss
 800092c:	e002      	b.n	8000934 <LoopFillZerobss>

0800092e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800092e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000930:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000932:	3204      	adds	r2, #4

08000934 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <LoopForever+0x16>)
  cmp  r2, r3
 8000936:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000938:	d3f9      	bcc.n	800092e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800093a:	f7ff ffab 	bl	8000894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093e:	f002 f9a3 	bl	8002c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000942:	f7ff fd79 	bl	8000438 <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
   ldr   r0, =_estack
 8000948:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 800094c:	08002d74 	.word	0x08002d74
  ldr  r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000954:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000958:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800095c:	20000100 	.word	0x20000100

08000960 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_COMP_IRQHandler>
	...

08000964 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	2200      	movs	r2, #0
 800096e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_Init+0x3c>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_Init+0x3c>)
 8000976:	2140      	movs	r1, #64	; 0x40
 8000978:	430a      	orrs	r2, r1
 800097a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097c:	2000      	movs	r0, #0
 800097e:	f000 f811 	bl	80009a4 <HAL_InitTick>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d003      	beq.n	800098e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	e001      	b.n	8000992 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800098e:	f7ff fec9 	bl	8000724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
}
 8000996:	0018      	movs	r0, r3
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_InitTick+0x5c>)
 80009ae:	681c      	ldr	r4, [r3, #0]
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_InitTick+0x60>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	0019      	movs	r1, r3
 80009b6:	23fa      	movs	r3, #250	; 0xfa
 80009b8:	0098      	lsls	r0, r3, #2
 80009ba:	f7ff fba5 	bl	8000108 <__udivsi3>
 80009be:	0003      	movs	r3, r0
 80009c0:	0019      	movs	r1, r3
 80009c2:	0020      	movs	r0, r4
 80009c4:	f7ff fba0 	bl	8000108 <__udivsi3>
 80009c8:	0003      	movs	r3, r0
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 f903 	bl	8000bd6 <HAL_SYSTICK_Config>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e00f      	b.n	80009f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d80b      	bhi.n	80009f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	2301      	movs	r3, #1
 80009e2:	425b      	negs	r3, r3
 80009e4:	2200      	movs	r2, #0
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 f8e0 	bl	8000bac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_InitTick+0x64>)
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b003      	add	sp, #12
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000004 	.word	0x20000004

08000a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x1c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	001a      	movs	r2, r3
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	18d2      	adds	r2, r2, r3
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_IncTick+0x20>)
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	200000fc 	.word	0x200000fc

08000a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <HAL_GetTick+0x10>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	200000fc 	.word	0x200000fc

08000a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff fff0 	bl	8000a30 <HAL_GetTick>
 8000a50:	0003      	movs	r3, r0
 8000a52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	d005      	beq.n	8000a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_Delay+0x40>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	001a      	movs	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	189b      	adds	r3, r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	f7ff ffe0 	bl	8000a30 <HAL_GetTick>
 8000a70:	0002      	movs	r2, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d8f7      	bhi.n	8000a6c <HAL_Delay+0x28>
  {
  }
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b004      	add	sp, #16
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000008 	.word	0x20000008

08000a88 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a9c:	d932      	bls.n	8000b04 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9e:	4a2f      	ldr	r2, [pc, #188]	; (8000b5c <NVIC_SetPriority+0xd4>)
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	400b      	ands	r3, r1
 8000aaa:	3b08      	subs	r3, #8
 8000aac:	089b      	lsrs	r3, r3, #2
 8000aae:	3306      	adds	r3, #6
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	18d3      	adds	r3, r2, r3
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	1dfa      	adds	r2, r7, #7
 8000aba:	7812      	ldrb	r2, [r2, #0]
 8000abc:	0011      	movs	r1, r2
 8000abe:	2203      	movs	r2, #3
 8000ac0:	400a      	ands	r2, r1
 8000ac2:	00d2      	lsls	r2, r2, #3
 8000ac4:	21ff      	movs	r1, #255	; 0xff
 8000ac6:	4091      	lsls	r1, r2
 8000ac8:	000a      	movs	r2, r1
 8000aca:	43d2      	mvns	r2, r2
 8000acc:	401a      	ands	r2, r3
 8000ace:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	019b      	lsls	r3, r3, #6
 8000ad4:	22ff      	movs	r2, #255	; 0xff
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	0018      	movs	r0, r3
 8000ade:	2303      	movs	r3, #3
 8000ae0:	4003      	ands	r3, r0
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae6:	481d      	ldr	r0, [pc, #116]	; (8000b5c <NVIC_SetPriority+0xd4>)
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	001c      	movs	r4, r3
 8000aee:	230f      	movs	r3, #15
 8000af0:	4023      	ands	r3, r4
 8000af2:	3b08      	subs	r3, #8
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	430a      	orrs	r2, r1
 8000af8:	3306      	adds	r3, #6
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	18c3      	adds	r3, r0, r3
 8000afe:	3304      	adds	r3, #4
 8000b00:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b02:	e027      	b.n	8000b54 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <NVIC_SetPriority+0xd8>)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	33c0      	adds	r3, #192	; 0xc0
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	589b      	ldr	r3, [r3, r2]
 8000b14:	1dfa      	adds	r2, r7, #7
 8000b16:	7812      	ldrb	r2, [r2, #0]
 8000b18:	0011      	movs	r1, r2
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	400a      	ands	r2, r1
 8000b1e:	00d2      	lsls	r2, r2, #3
 8000b20:	21ff      	movs	r1, #255	; 0xff
 8000b22:	4091      	lsls	r1, r2
 8000b24:	000a      	movs	r2, r1
 8000b26:	43d2      	mvns	r2, r2
 8000b28:	401a      	ands	r2, r3
 8000b2a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	019b      	lsls	r3, r3, #6
 8000b30:	22ff      	movs	r2, #255	; 0xff
 8000b32:	401a      	ands	r2, r3
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	4003      	ands	r3, r0
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <NVIC_SetPriority+0xd8>)
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b25b      	sxtb	r3, r3
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	33c0      	adds	r3, #192	; 0xc0
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	501a      	str	r2, [r3, r0]
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b003      	add	sp, #12
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	e000ed00 	.word	0xe000ed00
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	4a0c      	ldr	r2, [pc, #48]	; (8000ba4 <SysTick_Config+0x40>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d901      	bls.n	8000b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2301      	movs	r3, #1
 8000b78:	e010      	b.n	8000b9c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <SysTick_Config+0x44>)
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	3a01      	subs	r2, #1
 8000b80:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b82:	2301      	movs	r3, #1
 8000b84:	425b      	negs	r3, r3
 8000b86:	2103      	movs	r1, #3
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ff7d 	bl	8000a88 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SysTick_Config+0x44>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x44>)
 8000b96:	2207      	movs	r2, #7
 8000b98:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b002      	add	sp, #8
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	00ffffff 	.word	0x00ffffff
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	1c02      	adds	r2, r0, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f7ff ff5d 	bl	8000a88 <NVIC_SetPriority>
}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b004      	add	sp, #16
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff ffbf 	bl	8000b64 <SysTick_Config>
 8000be6:	0003      	movs	r3, r0
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c06:	e149      	b.n	8000e9c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	4091      	lsls	r1, r2
 8000c12:	000a      	movs	r2, r1
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d100      	bne.n	8000c20 <HAL_GPIO_Init+0x30>
 8000c1e:	e13a      	b.n	8000e96 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d00b      	beq.n	8000c40 <HAL_GPIO_Init+0x50>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d007      	beq.n	8000c40 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c34:	2b11      	cmp	r3, #17
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b12      	cmp	r3, #18
 8000c3e:	d130      	bne.n	8000ca2 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	409a      	lsls	r2, r3
 8000c4e:	0013      	movs	r3, r2
 8000c50:	43da      	mvns	r2, r3
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	409a      	lsls	r2, r3
 8000c62:	0013      	movs	r3, r2
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c76:	2201      	movs	r2, #1
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	091b      	lsrs	r3, r3, #4
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
 8000c94:	0013      	movs	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	2203      	movs	r2, #3
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_Init+0xf2>
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b12      	cmp	r3, #18
 8000ce0:	d123      	bne.n	8000d2a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	08da      	lsrs	r2, r3, #3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3208      	adds	r2, #8
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	58d3      	ldr	r3, [r2, r3]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	2207      	movs	r2, #7
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	691a      	ldr	r2, [r3, #16]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	2107      	movs	r1, #7
 8000d0e:	400b      	ands	r3, r1
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	08da      	lsrs	r2, r3, #3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3208      	adds	r2, #8
 8000d24:	0092      	lsls	r2, r2, #2
 8000d26:	6939      	ldr	r1, [r7, #16]
 8000d28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	2203      	movs	r2, #3
 8000d36:	409a      	lsls	r2, r3
 8000d38:	0013      	movs	r3, r2
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2203      	movs	r2, #3
 8000d48:	401a      	ands	r2, r3
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	055b      	lsls	r3, r3, #21
 8000d66:	4013      	ands	r3, r2
 8000d68:	d100      	bne.n	8000d6c <HAL_GPIO_Init+0x17c>
 8000d6a:	e094      	b.n	8000e96 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6c:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d70:	4b50      	ldr	r3, [pc, #320]	; (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000d72:	2101      	movs	r1, #1
 8000d74:	430a      	orrs	r2, r1
 8000d76:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d78:	4a4f      	ldr	r2, [pc, #316]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	089b      	lsrs	r3, r3, #2
 8000d7e:	3302      	adds	r3, #2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	589b      	ldr	r3, [r3, r2]
 8000d84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	2203      	movs	r2, #3
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	220f      	movs	r2, #15
 8000d90:	409a      	lsls	r2, r3
 8000d92:	0013      	movs	r3, r2
 8000d94:	43da      	mvns	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	23a0      	movs	r3, #160	; 0xa0
 8000da0:	05db      	lsls	r3, r3, #23
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d013      	beq.n	8000dce <HAL_GPIO_Init+0x1de>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a44      	ldr	r2, [pc, #272]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d00d      	beq.n	8000dca <HAL_GPIO_Init+0x1da>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a43      	ldr	r2, [pc, #268]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_Init+0x1d6>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a42      	ldr	r2, [pc, #264]	; (8000ec4 <HAL_GPIO_Init+0x2d4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_GPIO_Init+0x1d2>
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	e004      	b.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e002      	b.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	2103      	movs	r1, #3
 8000dd4:	400a      	ands	r2, r1
 8000dd6:	0092      	lsls	r2, r2, #2
 8000dd8:	4093      	lsls	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de0:	4935      	ldr	r1, [pc, #212]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	43da      	mvns	r2, r3
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	025b      	lsls	r3, r3, #9
 8000e06:	4013      	ands	r3, r2
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e12:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43da      	mvns	r2, r3
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	029b      	lsls	r3, r3, #10
 8000e30:	4013      	ands	r3, r2
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	035b      	lsls	r3, r3, #13
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43da      	mvns	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	039b      	lsls	r3, r3, #14
 8000e84:	4013      	ands	r3, r2
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_GPIO_Init+0x2d8>)
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	40da      	lsrs	r2, r3
 8000ea4:	1e13      	subs	r3, r2, #0
 8000ea6:	d000      	beq.n	8000eaa <HAL_GPIO_Init+0x2ba>
 8000ea8:	e6ae      	b.n	8000c08 <HAL_GPIO_Init+0x18>
  }
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b006      	add	sp, #24
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	50000400 	.word	0x50000400
 8000ec0:	50000800 	.word	0x50000800
 8000ec4:	50001c00 	.word	0x50001c00
 8000ec8:	40010400 	.word	0x40010400

08000ecc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	0008      	movs	r0, r1
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	1cbb      	adds	r3, r7, #2
 8000eda:	1c02      	adds	r2, r0, #0
 8000edc:	801a      	strh	r2, [r3, #0]
 8000ede:	1c7b      	adds	r3, r7, #1
 8000ee0:	1c0a      	adds	r2, r1, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee4:	1c7b      	adds	r3, r7, #1
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d004      	beq.n	8000ef6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eec:	1cbb      	adds	r3, r7, #2
 8000eee:	881a      	ldrh	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ef4:	e003      	b.n	8000efe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000ef6:	1cbb      	adds	r3, r7, #2
 8000ef8:	881a      	ldrh	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	000a      	movs	r2, r1
 8000f10:	1cbb      	adds	r3, r7, #2
 8000f12:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f1a:	1cbb      	adds	r3, r7, #2
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	4013      	ands	r3, r2
 8000f22:	041a      	lsls	r2, r3, #16
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	1cb9      	adds	r1, r7, #2
 8000f2a:	8809      	ldrh	r1, [r1, #0]
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b004      	add	sp, #16
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e082      	b.n	8001054 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2241      	movs	r2, #65	; 0x41
 8000f52:	5c9b      	ldrb	r3, [r3, r2]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d107      	bne.n	8000f6a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2240      	movs	r2, #64	; 0x40
 8000f5e:	2100      	movs	r1, #0
 8000f60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff fbf1 	bl	800074c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2241      	movs	r2, #65	; 0x41
 8000f6e:	2124      	movs	r1, #36	; 0x24
 8000f70:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	438a      	bics	r2, r1
 8000f80:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4934      	ldr	r1, [pc, #208]	; (800105c <HAL_I2C_Init+0x120>)
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4931      	ldr	r1, [pc, #196]	; (8001060 <HAL_I2C_Init+0x124>)
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d108      	bne.n	8000fba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2180      	movs	r1, #128	; 0x80
 8000fb2:	0209      	lsls	r1, r1, #8
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	e007      	b.n	8000fca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2184      	movs	r1, #132	; 0x84
 8000fc4:	0209      	lsls	r1, r1, #8
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d104      	bne.n	8000fdc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	491f      	ldr	r1, [pc, #124]	; (8001064 <HAL_I2C_Init+0x128>)
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68da      	ldr	r2, [r3, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	491a      	ldr	r1, [pc, #104]	; (8001060 <HAL_I2C_Init+0x124>)
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691a      	ldr	r2, [r3, #16]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	431a      	orrs	r2, r3
 8001006:	0011      	movs	r1, r2
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	021a      	lsls	r2, r3, #8
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69d9      	ldr	r1, [r3, #28]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a1a      	ldr	r2, [r3, #32]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2101      	movs	r1, #1
 8001032:	430a      	orrs	r2, r1
 8001034:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2241      	movs	r2, #65	; 0x41
 8001040:	2120      	movs	r1, #32
 8001042:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2242      	movs	r2, #66	; 0x42
 800104e:	2100      	movs	r1, #0
 8001050:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	b002      	add	sp, #8
 800105a:	bd80      	pop	{r7, pc}
 800105c:	f0ffffff 	.word	0xf0ffffff
 8001060:	ffff7fff 	.word	0xffff7fff
 8001064:	02008000 	.word	0x02008000

08001068 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af02      	add	r7, sp, #8
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	0008      	movs	r0, r1
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	0019      	movs	r1, r3
 8001076:	230a      	movs	r3, #10
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	1c02      	adds	r2, r0, #0
 800107c:	801a      	strh	r2, [r3, #0]
 800107e:	2308      	movs	r3, #8
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	1c0a      	adds	r2, r1, #0
 8001084:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2241      	movs	r2, #65	; 0x41
 800108a:	5c9b      	ldrb	r3, [r3, r2]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b20      	cmp	r3, #32
 8001090:	d000      	beq.n	8001094 <HAL_I2C_Master_Transmit+0x2c>
 8001092:	e0e7      	b.n	8001264 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2240      	movs	r2, #64	; 0x40
 8001098:	5c9b      	ldrb	r3, [r3, r2]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d101      	bne.n	80010a2 <HAL_I2C_Master_Transmit+0x3a>
 800109e:	2302      	movs	r3, #2
 80010a0:	e0e1      	b.n	8001266 <HAL_I2C_Master_Transmit+0x1fe>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2240      	movs	r2, #64	; 0x40
 80010a6:	2101      	movs	r1, #1
 80010a8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010aa:	f7ff fcc1 	bl	8000a30 <HAL_GetTick>
 80010ae:	0003      	movs	r3, r0
 80010b0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	0219      	lsls	r1, r3, #8
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2319      	movs	r3, #25
 80010be:	2201      	movs	r2, #1
 80010c0:	f000 f8fc 	bl	80012bc <I2C_WaitOnFlagUntilTimeout>
 80010c4:	1e03      	subs	r3, r0, #0
 80010c6:	d001      	beq.n	80010cc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0cc      	b.n	8001266 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2241      	movs	r2, #65	; 0x41
 80010d0:	2121      	movs	r1, #33	; 0x21
 80010d2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2242      	movs	r2, #66	; 0x42
 80010d8:	2110      	movs	r1, #16
 80010da:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2200      	movs	r2, #0
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2208      	movs	r2, #8
 80010ec:	18ba      	adds	r2, r7, r2
 80010ee:	8812      	ldrh	r2, [r2, #0]
 80010f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	2bff      	cmp	r3, #255	; 0xff
 8001100:	d911      	bls.n	8001126 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	22ff      	movs	r2, #255	; 0xff
 8001106:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110c:	b2da      	uxtb	r2, r3
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	045c      	lsls	r4, r3, #17
 8001112:	230a      	movs	r3, #10
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	8819      	ldrh	r1, [r3, #0]
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	4b55      	ldr	r3, [pc, #340]	; (8001270 <HAL_I2C_Master_Transmit+0x208>)
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	0023      	movs	r3, r4
 8001120:	f000 f9ec 	bl	80014fc <I2C_TransferConfig>
 8001124:	e075      	b.n	8001212 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800112a:	b29a      	uxth	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001134:	b2da      	uxtb	r2, r3
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	049c      	lsls	r4, r3, #18
 800113a:	230a      	movs	r3, #10
 800113c:	18fb      	adds	r3, r7, r3
 800113e:	8819      	ldrh	r1, [r3, #0]
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	4b4b      	ldr	r3, [pc, #300]	; (8001270 <HAL_I2C_Master_Transmit+0x208>)
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	0023      	movs	r3, r4
 8001148:	f000 f9d8 	bl	80014fc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800114c:	e061      	b.n	8001212 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	0018      	movs	r0, r3
 8001156:	f000 f8f0 	bl	800133a <I2C_WaitOnTXISFlagUntilTimeout>
 800115a:	1e03      	subs	r3, r0, #0
 800115c:	d001      	beq.n	8001162 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e081      	b.n	8001266 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800117c:	b29b      	uxth	r3, r3
 800117e:	3b01      	subs	r3, #1
 8001180:	b29a      	uxth	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800118a:	3b01      	subs	r3, #1
 800118c:	b29a      	uxth	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001196:	b29b      	uxth	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d03a      	beq.n	8001212 <HAL_I2C_Master_Transmit+0x1aa>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d136      	bne.n	8001212 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	0013      	movs	r3, r2
 80011ae:	2200      	movs	r2, #0
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	f000 f883 	bl	80012bc <I2C_WaitOnFlagUntilTimeout>
 80011b6:	1e03      	subs	r3, r0, #0
 80011b8:	d001      	beq.n	80011be <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e053      	b.n	8001266 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	2bff      	cmp	r3, #255	; 0xff
 80011c6:	d911      	bls.n	80011ec <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	045c      	lsls	r4, r3, #17
 80011d8:	230a      	movs	r3, #10
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	8819      	ldrh	r1, [r3, #0]
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	2300      	movs	r3, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	0023      	movs	r3, r4
 80011e6:	f000 f989 	bl	80014fc <I2C_TransferConfig>
 80011ea:	e012      	b.n	8001212 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	049c      	lsls	r4, r3, #18
 8001200:	230a      	movs	r3, #10
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	8819      	ldrh	r1, [r3, #0]
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	2300      	movs	r3, #0
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	0023      	movs	r3, r4
 800120e:	f000 f975 	bl	80014fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001216:	b29b      	uxth	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d198      	bne.n	800114e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	0018      	movs	r0, r3
 8001224:	f000 f8c8 	bl	80013b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d001      	beq.n	8001230 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e01a      	b.n	8001266 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2220      	movs	r2, #32
 8001236:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	490c      	ldr	r1, [pc, #48]	; (8001274 <HAL_I2C_Master_Transmit+0x20c>)
 8001244:	400a      	ands	r2, r1
 8001246:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2241      	movs	r2, #65	; 0x41
 800124c:	2120      	movs	r1, #32
 800124e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2242      	movs	r2, #66	; 0x42
 8001254:	2100      	movs	r1, #0
 8001256:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	2100      	movs	r1, #0
 800125e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	e000      	b.n	8001266 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001264:	2302      	movs	r3, #2
  }
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b007      	add	sp, #28
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	80002000 	.word	0x80002000
 8001274:	fe00e800 	.word	0xfe00e800

08001278 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	2202      	movs	r2, #2
 8001288:	4013      	ands	r3, r2
 800128a:	2b02      	cmp	r3, #2
 800128c:	d103      	bne.n	8001296 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	2201      	movs	r2, #1
 800129e:	4013      	ands	r3, r2
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d007      	beq.n	80012b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	699a      	ldr	r2, [r3, #24]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2101      	movs	r1, #1
 80012b0:	430a      	orrs	r2, r1
 80012b2:	619a      	str	r2, [r3, #24]
  }
}
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b002      	add	sp, #8
 80012ba:	bd80      	pop	{r7, pc}

080012bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	1dfb      	adds	r3, r7, #7
 80012ca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012cc:	e021      	b.n	8001312 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	d01e      	beq.n	8001312 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012d4:	f7ff fbac 	bl	8000a30 <HAL_GetTick>
 80012d8:	0002      	movs	r2, r0
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d302      	bcc.n	80012ea <I2C_WaitOnFlagUntilTimeout+0x2e>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d113      	bne.n	8001312 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	2220      	movs	r2, #32
 80012f0:	431a      	orrs	r2, r3
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2241      	movs	r2, #65	; 0x41
 80012fa:	2120      	movs	r1, #32
 80012fc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2242      	movs	r2, #66	; 0x42
 8001302:	2100      	movs	r1, #0
 8001304:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2240      	movs	r2, #64	; 0x40
 800130a:	2100      	movs	r1, #0
 800130c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	4013      	ands	r3, r2
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	425a      	negs	r2, r3
 8001322:	4153      	adcs	r3, r2
 8001324:	b2db      	uxtb	r3, r3
 8001326:	001a      	movs	r2, r3
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d0ce      	beq.n	80012ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	0018      	movs	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	b004      	add	sp, #16
 8001338:	bd80      	pop	{r7, pc}

0800133a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001346:	e02b      	b.n	80013a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	68b9      	ldr	r1, [r7, #8]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	0018      	movs	r0, r3
 8001350:	f000 f86e 	bl	8001430 <I2C_IsAcknowledgeFailed>
 8001354:	1e03      	subs	r3, r0, #0
 8001356:	d001      	beq.n	800135c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e029      	b.n	80013b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	3301      	adds	r3, #1
 8001360:	d01e      	beq.n	80013a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001362:	f7ff fb65 	bl	8000a30 <HAL_GetTick>
 8001366:	0002      	movs	r2, r0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	429a      	cmp	r2, r3
 8001370:	d302      	bcc.n	8001378 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d113      	bne.n	80013a0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	2220      	movs	r2, #32
 800137e:	431a      	orrs	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2241      	movs	r2, #65	; 0x41
 8001388:	2120      	movs	r1, #32
 800138a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2242      	movs	r2, #66	; 0x42
 8001390:	2100      	movs	r1, #0
 8001392:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2240      	movs	r2, #64	; 0x40
 8001398:	2100      	movs	r1, #0
 800139a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e007      	b.n	80013b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	2202      	movs	r2, #2
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d1cc      	bne.n	8001348 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b004      	add	sp, #16
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013c4:	e028      	b.n	8001418 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	0018      	movs	r0, r3
 80013ce:	f000 f82f 	bl	8001430 <I2C_IsAcknowledgeFailed>
 80013d2:	1e03      	subs	r3, r0, #0
 80013d4:	d001      	beq.n	80013da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e026      	b.n	8001428 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013da:	f7ff fb29 	bl	8000a30 <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d302      	bcc.n	80013f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d113      	bne.n	8001418 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	2220      	movs	r2, #32
 80013f6:	431a      	orrs	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2241      	movs	r2, #65	; 0x41
 8001400:	2120      	movs	r1, #32
 8001402:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2242      	movs	r2, #66	; 0x42
 8001408:	2100      	movs	r1, #0
 800140a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2240      	movs	r2, #64	; 0x40
 8001410:	2100      	movs	r1, #0
 8001412:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e007      	b.n	8001428 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2220      	movs	r2, #32
 8001420:	4013      	ands	r3, r2
 8001422:	2b20      	cmp	r3, #32
 8001424:	d1cf      	bne.n	80013c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b004      	add	sp, #16
 800142e:	bd80      	pop	{r7, pc}

08001430 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	2210      	movs	r2, #16
 8001444:	4013      	ands	r3, r2
 8001446:	2b10      	cmp	r3, #16
 8001448:	d151      	bne.n	80014ee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800144a:	e021      	b.n	8001490 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3301      	adds	r3, #1
 8001450:	d01e      	beq.n	8001490 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001452:	f7ff faed 	bl	8000a30 <HAL_GetTick>
 8001456:	0002      	movs	r2, r0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	429a      	cmp	r2, r3
 8001460:	d302      	bcc.n	8001468 <I2C_IsAcknowledgeFailed+0x38>
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d113      	bne.n	8001490 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	2220      	movs	r2, #32
 800146e:	431a      	orrs	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2241      	movs	r2, #65	; 0x41
 8001478:	2120      	movs	r1, #32
 800147a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2242      	movs	r2, #66	; 0x42
 8001480:	2100      	movs	r1, #0
 8001482:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2240      	movs	r2, #64	; 0x40
 8001488:	2100      	movs	r1, #0
 800148a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e02f      	b.n	80014f0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2220      	movs	r2, #32
 8001498:	4013      	ands	r3, r2
 800149a:	2b20      	cmp	r3, #32
 800149c:	d1d6      	bne.n	800144c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2210      	movs	r2, #16
 80014a4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2220      	movs	r2, #32
 80014ac:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff fee1 	bl	8001278 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	490d      	ldr	r1, [pc, #52]	; (80014f8 <I2C_IsAcknowledgeFailed+0xc8>)
 80014c2:	400a      	ands	r2, r1
 80014c4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	2204      	movs	r2, #4
 80014cc:	431a      	orrs	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2241      	movs	r2, #65	; 0x41
 80014d6:	2120      	movs	r1, #32
 80014d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2242      	movs	r2, #66	; 0x42
 80014de:	2100      	movs	r1, #0
 80014e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2240      	movs	r2, #64	; 0x40
 80014e6:	2100      	movs	r1, #0
 80014e8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b004      	add	sp, #16
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	fe00e800 	.word	0xfe00e800

080014fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	0008      	movs	r0, r1
 8001506:	0011      	movs	r1, r2
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	240a      	movs	r4, #10
 800150c:	193b      	adds	r3, r7, r4
 800150e:	1c02      	adds	r2, r0, #0
 8001510:	801a      	strh	r2, [r3, #0]
 8001512:	2009      	movs	r0, #9
 8001514:	183b      	adds	r3, r7, r0
 8001516:	1c0a      	adds	r2, r1, #0
 8001518:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	6a3a      	ldr	r2, [r7, #32]
 8001522:	0d51      	lsrs	r1, r2, #21
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	00d2      	lsls	r2, r2, #3
 8001528:	400a      	ands	r2, r1
 800152a:	490e      	ldr	r1, [pc, #56]	; (8001564 <I2C_TransferConfig+0x68>)
 800152c:	430a      	orrs	r2, r1
 800152e:	43d2      	mvns	r2, r2
 8001530:	401a      	ands	r2, r3
 8001532:	0011      	movs	r1, r2
 8001534:	193b      	adds	r3, r7, r4
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	059b      	lsls	r3, r3, #22
 800153a:	0d9a      	lsrs	r2, r3, #22
 800153c:	183b      	adds	r3, r7, r0
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	0418      	lsls	r0, r3, #16
 8001542:	23ff      	movs	r3, #255	; 0xff
 8001544:	041b      	lsls	r3, r3, #16
 8001546:	4003      	ands	r3, r0
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	431a      	orrs	r2, r3
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	431a      	orrs	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	b005      	add	sp, #20
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	03ff63ff 	.word	0x03ff63ff

08001568 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2241      	movs	r2, #65	; 0x41
 8001576:	5c9b      	ldrb	r3, [r3, r2]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b20      	cmp	r3, #32
 800157c:	d138      	bne.n	80015f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2240      	movs	r2, #64	; 0x40
 8001582:	5c9b      	ldrb	r3, [r3, r2]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001588:	2302      	movs	r3, #2
 800158a:	e032      	b.n	80015f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2240      	movs	r2, #64	; 0x40
 8001590:	2101      	movs	r1, #1
 8001592:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2241      	movs	r2, #65	; 0x41
 8001598:	2124      	movs	r1, #36	; 0x24
 800159a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2101      	movs	r1, #1
 80015a8:	438a      	bics	r2, r1
 80015aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4911      	ldr	r1, [pc, #68]	; (80015fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80015b8:	400a      	ands	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6819      	ldr	r1, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2101      	movs	r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2241      	movs	r2, #65	; 0x41
 80015e0:	2120      	movs	r1, #32
 80015e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	2100      	movs	r1, #0
 80015ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e000      	b.n	80015f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015f0:	2302      	movs	r3, #2
  }
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b002      	add	sp, #8
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	ffffefff 	.word	0xffffefff

08001600 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2241      	movs	r2, #65	; 0x41
 800160e:	5c9b      	ldrb	r3, [r3, r2]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b20      	cmp	r3, #32
 8001614:	d139      	bne.n	800168a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2240      	movs	r2, #64	; 0x40
 800161a:	5c9b      	ldrb	r3, [r3, r2]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001620:	2302      	movs	r3, #2
 8001622:	e033      	b.n	800168c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2240      	movs	r2, #64	; 0x40
 8001628:	2101      	movs	r1, #1
 800162a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2241      	movs	r2, #65	; 0x41
 8001630:	2124      	movs	r1, #36	; 0x24
 8001632:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2101      	movs	r1, #1
 8001640:	438a      	bics	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4a11      	ldr	r2, [pc, #68]	; (8001694 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	4313      	orrs	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2101      	movs	r1, #1
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2241      	movs	r2, #65	; 0x41
 800167a:	2120      	movs	r1, #32
 800167c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2240      	movs	r2, #64	; 0x40
 8001682:	2100      	movs	r1, #0
 8001684:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800168a:	2302      	movs	r3, #2
  }
}
 800168c:	0018      	movs	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	b004      	add	sp, #16
 8001692:	bd80      	pop	{r7, pc}
 8001694:	fffff0ff 	.word	0xfffff0ff

08001698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001698:	b5b0      	push	{r4, r5, r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f000 fb6a 	bl	8001d80 <HAL_RCC_OscConfig+0x6e8>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ac:	4bc7      	ldr	r3, [pc, #796]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	220c      	movs	r2, #12
 80016b2:	4013      	ands	r3, r2
 80016b4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b6:	4bc5      	ldr	r3, [pc, #788]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	025b      	lsls	r3, r3, #9
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	d100      	bne.n	80016ce <HAL_RCC_OscConfig+0x36>
 80016cc:	e07d      	b.n	80017ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d007      	beq.n	80016e4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	2b0c      	cmp	r3, #12
 80016d8:	d112      	bne.n	8001700 <HAL_RCC_OscConfig+0x68>
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	025b      	lsls	r3, r3, #9
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d10d      	bne.n	8001700 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	4bb9      	ldr	r3, [pc, #740]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	029b      	lsls	r3, r3, #10
 80016ec:	4013      	ands	r3, r2
 80016ee:	d100      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5a>
 80016f0:	e06a      	b.n	80017c8 <HAL_RCC_OscConfig+0x130>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d166      	bne.n	80017c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f000 fb40 	bl	8001d80 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	025b      	lsls	r3, r3, #9
 8001708:	429a      	cmp	r2, r3
 800170a:	d107      	bne.n	800171c <HAL_RCC_OscConfig+0x84>
 800170c:	4baf      	ldr	r3, [pc, #700]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4bae      	ldr	r3, [pc, #696]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	0249      	lsls	r1, r1, #9
 8001716:	430a      	orrs	r2, r1
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e027      	b.n	800176c <HAL_RCC_OscConfig+0xd4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	23a0      	movs	r3, #160	; 0xa0
 8001722:	02db      	lsls	r3, r3, #11
 8001724:	429a      	cmp	r2, r3
 8001726:	d10e      	bne.n	8001746 <HAL_RCC_OscConfig+0xae>
 8001728:	4ba8      	ldr	r3, [pc, #672]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4ba7      	ldr	r3, [pc, #668]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 800172e:	2180      	movs	r1, #128	; 0x80
 8001730:	02c9      	lsls	r1, r1, #11
 8001732:	430a      	orrs	r2, r1
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	4ba5      	ldr	r3, [pc, #660]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	4ba4      	ldr	r3, [pc, #656]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	0249      	lsls	r1, r1, #9
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e012      	b.n	800176c <HAL_RCC_OscConfig+0xd4>
 8001746:	4ba1      	ldr	r3, [pc, #644]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4ba0      	ldr	r3, [pc, #640]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 800174c:	49a0      	ldr	r1, [pc, #640]	; (80019d0 <HAL_RCC_OscConfig+0x338>)
 800174e:	400a      	ands	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	4b9e      	ldr	r3, [pc, #632]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	2380      	movs	r3, #128	; 0x80
 8001758:	025b      	lsls	r3, r3, #9
 800175a:	4013      	ands	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4b9a      	ldr	r3, [pc, #616]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b99      	ldr	r3, [pc, #612]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001766:	499b      	ldr	r1, [pc, #620]	; (80019d4 <HAL_RCC_OscConfig+0x33c>)
 8001768:	400a      	ands	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d014      	beq.n	800179e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff f95c 	bl	8000a30 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800177e:	f7ff f957 	bl	8000a30 <HAL_GetTick>
 8001782:	0002      	movs	r2, r0
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b64      	cmp	r3, #100	; 0x64
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e2f7      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001790:	4b8e      	ldr	r3, [pc, #568]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	029b      	lsls	r3, r3, #10
 8001798:	4013      	ands	r3, r2
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0xe6>
 800179c:	e015      	b.n	80017ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff f947 	bl	8000a30 <HAL_GetTick>
 80017a2:	0003      	movs	r3, r0
 80017a4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff f942 	bl	8000a30 <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e2e2      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017ba:	4b84      	ldr	r3, [pc, #528]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	029b      	lsls	r3, r3, #10
 80017c2:	4013      	ands	r3, r2
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x110>
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2202      	movs	r2, #2
 80017d0:	4013      	ands	r3, r2
 80017d2:	d100      	bne.n	80017d6 <HAL_RCC_OscConfig+0x13e>
 80017d4:	e098      	b.n	8001908 <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	2220      	movs	r2, #32
 80017e0:	4013      	ands	r3, r2
 80017e2:	d009      	beq.n	80017f8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80017e4:	4b79      	ldr	r3, [pc, #484]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b78      	ldr	r3, [pc, #480]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 80017ea:	2120      	movs	r1, #32
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	2220      	movs	r2, #32
 80017f4:	4393      	bics	r3, r2
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d005      	beq.n	800180a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	2b0c      	cmp	r3, #12
 8001802:	d13d      	bne.n	8001880 <HAL_RCC_OscConfig+0x1e8>
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d13a      	bne.n	8001880 <HAL_RCC_OscConfig+0x1e8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800180a:	4b70      	ldr	r3, [pc, #448]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2204      	movs	r2, #4
 8001810:	4013      	ands	r3, r2
 8001812:	d004      	beq.n	800181e <HAL_RCC_OscConfig+0x186>
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e2b0      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b6b      	ldr	r3, [pc, #428]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4a6d      	ldr	r2, [pc, #436]	; (80019d8 <HAL_RCC_OscConfig+0x340>)
 8001824:	4013      	ands	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	021a      	lsls	r2, r3, #8
 800182e:	4b67      	ldr	r3, [pc, #412]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001830:	430a      	orrs	r2, r1
 8001832:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001834:	4b65      	ldr	r3, [pc, #404]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2209      	movs	r2, #9
 800183a:	4393      	bics	r3, r2
 800183c:	0019      	movs	r1, r3
 800183e:	4b63      	ldr	r3, [pc, #396]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001842:	430a      	orrs	r2, r1
 8001844:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001846:	f000 fbcb 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 800184a:	0001      	movs	r1, r0
 800184c:	4b5f      	ldr	r3, [pc, #380]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	220f      	movs	r2, #15
 8001854:	4013      	ands	r3, r2
 8001856:	4a61      	ldr	r2, [pc, #388]	; (80019dc <HAL_RCC_OscConfig+0x344>)
 8001858:	5cd3      	ldrb	r3, [r2, r3]
 800185a:	000a      	movs	r2, r1
 800185c:	40da      	lsrs	r2, r3
 800185e:	4b60      	ldr	r3, [pc, #384]	; (80019e0 <HAL_RCC_OscConfig+0x348>)
 8001860:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001862:	2513      	movs	r5, #19
 8001864:	197c      	adds	r4, r7, r5
 8001866:	2000      	movs	r0, #0
 8001868:	f7ff f89c 	bl	80009a4 <HAL_InitTick>
 800186c:	0003      	movs	r3, r0
 800186e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001870:	197b      	adds	r3, r7, r5
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d047      	beq.n	8001908 <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8001878:	2313      	movs	r3, #19
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	e27f      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	2b00      	cmp	r3, #0
 8001884:	d027      	beq.n	80018d6 <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001886:	4b51      	ldr	r3, [pc, #324]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2209      	movs	r2, #9
 800188c:	4393      	bics	r3, r2
 800188e:	0019      	movs	r1, r3
 8001890:	4b4e      	ldr	r3, [pc, #312]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff f8ca 	bl	8000a30 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a2:	f7ff f8c5 	bl	8000a30 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x21c>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e265      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018b4:	4b45      	ldr	r3, [pc, #276]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2204      	movs	r2, #4
 80018ba:	4013      	ands	r3, r2
 80018bc:	d0f1      	beq.n	80018a2 <HAL_RCC_OscConfig+0x20a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	4b43      	ldr	r3, [pc, #268]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4a45      	ldr	r2, [pc, #276]	; (80019d8 <HAL_RCC_OscConfig+0x340>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	0019      	movs	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	021a      	lsls	r2, r3, #8
 80018ce:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 80018d0:	430a      	orrs	r2, r1
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	e018      	b.n	8001908 <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d6:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b3c      	ldr	r3, [pc, #240]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 80018dc:	2101      	movs	r1, #1
 80018de:	438a      	bics	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff f8a5 	bl	8000a30 <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ec:	f7ff f8a0 	bl	8000a30 <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e240      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018fe:	4b33      	ldr	r3, [pc, #204]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2204      	movs	r2, #4
 8001904:	4013      	ands	r3, r2
 8001906:	d1f1      	bne.n	80018ec <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2210      	movs	r2, #16
 800190e:	4013      	ands	r3, r2
 8001910:	d100      	bne.n	8001914 <HAL_RCC_OscConfig+0x27c>
 8001912:	e09e      	b.n	8001a52 <HAL_RCC_OscConfig+0x3ba>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d13f      	bne.n	800199a <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800191a:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4013      	ands	r3, r2
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x29a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e226      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001932:	4b26      	ldr	r3, [pc, #152]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4a2b      	ldr	r2, [pc, #172]	; (80019e4 <HAL_RCC_OscConfig+0x34c>)
 8001938:	4013      	ands	r3, r2
 800193a:	0019      	movs	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1a      	ldr	r2, [r3, #32]
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	0a19      	lsrs	r1, r3, #8
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	061a      	lsls	r2, r3, #24
 8001954:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 8001956:	430a      	orrs	r2, r1
 8001958:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	0b5b      	lsrs	r3, r3, #13
 8001960:	3301      	adds	r3, #1
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	0212      	lsls	r2, r2, #8
 8001966:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	210f      	movs	r1, #15
 8001970:	400b      	ands	r3, r1
 8001972:	491a      	ldr	r1, [pc, #104]	; (80019dc <HAL_RCC_OscConfig+0x344>)
 8001974:	5ccb      	ldrb	r3, [r1, r3]
 8001976:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001978:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_RCC_OscConfig+0x348>)
 800197a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800197c:	2513      	movs	r5, #19
 800197e:	197c      	adds	r4, r7, r5
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff f80f 	bl	80009a4 <HAL_InitTick>
 8001986:	0003      	movs	r3, r0
 8001988:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800198a:	197b      	adds	r3, r7, r5
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d05f      	beq.n	8001a52 <HAL_RCC_OscConfig+0x3ba>
        {
          return status;
 8001992:	2313      	movs	r3, #19
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	e1f2      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d03d      	beq.n	8001a1e <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <HAL_RCC_OscConfig+0x334>)
 80019a8:	2180      	movs	r1, #128	; 0x80
 80019aa:	0049      	lsls	r1, r1, #1
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff f83e 	bl	8000a30 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019b8:	e016      	b.n	80019e8 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ba:	f7ff f839 	bl	8000a30 <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d90f      	bls.n	80019e8 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e1d9      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
 80019cc:	40021000 	.word	0x40021000
 80019d0:	fffeffff 	.word	0xfffeffff
 80019d4:	fffbffff 	.word	0xfffbffff
 80019d8:	ffffe0ff 	.word	0xffffe0ff
 80019dc:	08002cf8 	.word	0x08002cf8
 80019e0:	20000000 	.word	0x20000000
 80019e4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019e8:	4bca      	ldr	r3, [pc, #808]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4013      	ands	r3, r2
 80019f2:	d0e2      	beq.n	80019ba <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f4:	4bc7      	ldr	r3, [pc, #796]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4ac7      	ldr	r2, [pc, #796]	; (8001d18 <HAL_RCC_OscConfig+0x680>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	0019      	movs	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1a      	ldr	r2, [r3, #32]
 8001a02:	4bc4      	ldr	r3, [pc, #784]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a08:	4bc2      	ldr	r3, [pc, #776]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	0a19      	lsrs	r1, r3, #8
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	061a      	lsls	r2, r3, #24
 8001a16:	4bbf      	ldr	r3, [pc, #764]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	e019      	b.n	8001a52 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a1e:	4bbd      	ldr	r3, [pc, #756]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4bbc      	ldr	r3, [pc, #752]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001a24:	49bd      	ldr	r1, [pc, #756]	; (8001d1c <HAL_RCC_OscConfig+0x684>)
 8001a26:	400a      	ands	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f801 	bl	8000a30 <HAL_GetTick>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a34:	f7fe fffc 	bl	8000a30 <HAL_GetTick>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e19c      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a46:	4bb3      	ldr	r3, [pc, #716]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2208      	movs	r2, #8
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d036      	beq.n	8001aca <HAL_RCC_OscConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d019      	beq.n	8001a98 <HAL_RCC_OscConfig+0x400>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a64:	4bab      	ldr	r3, [pc, #684]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001a66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a68:	4baa      	ldr	r3, [pc, #680]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7fe ffde 	bl	8000a30 <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7fe ffd9 	bl	8000a30 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e179      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a8c:	4ba1      	ldr	r3, [pc, #644]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a90:	2202      	movs	r2, #2
 8001a92:	4013      	ands	r3, r2
 8001a94:	d0f1      	beq.n	8001a7a <HAL_RCC_OscConfig+0x3e2>
 8001a96:	e018      	b.n	8001aca <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a98:	4b9e      	ldr	r3, [pc, #632]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001a9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a9c:	4b9d      	ldr	r3, [pc, #628]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	438a      	bics	r2, r1
 8001aa2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa4:	f7fe ffc4 	bl	8000a30 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aae:	f7fe ffbf 	bl	8000a30 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e15f      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ac0:	4b94      	ldr	r3, [pc, #592]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d1f1      	bne.n	8001aae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2204      	movs	r2, #4
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x43e>
 8001ad4:	e0af      	b.n	8001c36 <HAL_RCC_OscConfig+0x59e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad6:	2323      	movs	r3, #35	; 0x23
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ade:	4b8d      	ldr	r3, [pc, #564]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	055b      	lsls	r3, r3, #21
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d10a      	bne.n	8001b00 <HAL_RCC_OscConfig+0x468>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b8a      	ldr	r3, [pc, #552]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aee:	4b89      	ldr	r3, [pc, #548]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	0549      	lsls	r1, r1, #21
 8001af4:	430a      	orrs	r2, r1
 8001af6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001af8:	2323      	movs	r3, #35	; 0x23
 8001afa:	18fb      	adds	r3, r7, r3
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	4b87      	ldr	r3, [pc, #540]	; (8001d20 <HAL_RCC_OscConfig+0x688>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d11a      	bne.n	8001b42 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0c:	4b84      	ldr	r3, [pc, #528]	; (8001d20 <HAL_RCC_OscConfig+0x688>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b83      	ldr	r3, [pc, #524]	; (8001d20 <HAL_RCC_OscConfig+0x688>)
 8001b12:	2180      	movs	r1, #128	; 0x80
 8001b14:	0049      	lsls	r1, r1, #1
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b1a:	f7fe ff89 	bl	8000a30 <HAL_GetTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b24:	f7fe ff84 	bl	8000a30 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e124      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	4b7a      	ldr	r3, [pc, #488]	; (8001d20 <HAL_RCC_OscConfig+0x688>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0x48c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_OscConfig+0x4c6>
 8001b4e:	4b71      	ldr	r3, [pc, #452]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001b50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b52:	4b70      	ldr	r3, [pc, #448]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	0049      	lsls	r1, r1, #1
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	651a      	str	r2, [r3, #80]	; 0x50
 8001b5c:	e031      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4e8>
 8001b66:	4b6b      	ldr	r3, [pc, #428]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001b68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b6a:	4b6a      	ldr	r3, [pc, #424]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001b6c:	496b      	ldr	r1, [pc, #428]	; (8001d1c <HAL_RCC_OscConfig+0x684>)
 8001b6e:	400a      	ands	r2, r1
 8001b70:	651a      	str	r2, [r3, #80]	; 0x50
 8001b72:	4b68      	ldr	r3, [pc, #416]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b76:	4b67      	ldr	r3, [pc, #412]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001b78:	496a      	ldr	r1, [pc, #424]	; (8001d24 <HAL_RCC_OscConfig+0x68c>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	651a      	str	r2, [r3, #80]	; 0x50
 8001b7e:	e020      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	23a0      	movs	r3, #160	; 0xa0
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d10e      	bne.n	8001baa <HAL_RCC_OscConfig+0x512>
 8001b8c:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001b8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b90:	4b60      	ldr	r3, [pc, #384]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	00c9      	lsls	r1, r1, #3
 8001b96:	430a      	orrs	r2, r1
 8001b98:	651a      	str	r2, [r3, #80]	; 0x50
 8001b9a:	4b5e      	ldr	r3, [pc, #376]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001b9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b9e:	4b5d      	ldr	r3, [pc, #372]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001ba0:	2180      	movs	r1, #128	; 0x80
 8001ba2:	0049      	lsls	r1, r1, #1
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	651a      	str	r2, [r3, #80]	; 0x50
 8001ba8:	e00b      	b.n	8001bc2 <HAL_RCC_OscConfig+0x52a>
 8001baa:	4b5a      	ldr	r3, [pc, #360]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bae:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001bb0:	495a      	ldr	r1, [pc, #360]	; (8001d1c <HAL_RCC_OscConfig+0x684>)
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	651a      	str	r2, [r3, #80]	; 0x50
 8001bb6:	4b57      	ldr	r3, [pc, #348]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001bb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bba:	4b56      	ldr	r3, [pc, #344]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001bbc:	4959      	ldr	r1, [pc, #356]	; (8001d24 <HAL_RCC_OscConfig+0x68c>)
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d015      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x55e>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7fe ff31 	bl	8000a30 <HAL_GetTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bd2:	e009      	b.n	8001be8 <HAL_RCC_OscConfig+0x550>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7fe ff2c 	bl	8000a30 <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	4a52      	ldr	r2, [pc, #328]	; (8001d28 <HAL_RCC_OscConfig+0x690>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x550>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e0cb      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001be8:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001bea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d0ef      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x53c>
 8001bf4:	e014      	b.n	8001c20 <HAL_RCC_OscConfig+0x588>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7fe ff1b 	bl	8000a30 <HAL_GetTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bfe:	e009      	b.n	8001c14 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7fe ff16 	bl	8000a30 <HAL_GetTick>
 8001c04:	0002      	movs	r2, r0
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	4a47      	ldr	r2, [pc, #284]	; (8001d28 <HAL_RCC_OscConfig+0x690>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e0b5      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c14:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001c16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d1ef      	bne.n	8001c00 <HAL_RCC_OscConfig+0x568>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c20:	2323      	movs	r3, #35	; 0x23
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d105      	bne.n	8001c36 <HAL_RCC_OscConfig+0x59e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c2e:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001c30:	493e      	ldr	r1, [pc, #248]	; (8001d2c <HAL_RCC_OscConfig+0x694>)
 8001c32:	400a      	ands	r2, r1
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d100      	bne.n	8001c40 <HAL_RCC_OscConfig+0x5a8>
 8001c3e:	e09e      	b.n	8001d7e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d100      	bne.n	8001c48 <HAL_RCC_OscConfig+0x5b0>
 8001c46:	e077      	b.n	8001d38 <HAL_RCC_OscConfig+0x6a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d145      	bne.n	8001cdc <HAL_RCC_OscConfig+0x644>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b2f      	ldr	r3, [pc, #188]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001c56:	4936      	ldr	r1, [pc, #216]	; (8001d30 <HAL_RCC_OscConfig+0x698>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7fe fee8 	bl	8000a30 <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x5e0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c66:	f7fe fee3 	bl	8000a30 <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e083      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	049b      	lsls	r3, r3, #18
 8001c80:	4013      	ands	r3, r2
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4a2a      	ldr	r2, [pc, #168]	; (8001d34 <HAL_RCC_OscConfig+0x69c>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	0449      	lsls	r1, r1, #17
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7fe febd 	bl	8000a30 <HAL_GetTick>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7fe feb8 	bl	8000a30 <HAL_GetTick>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e058      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	049b      	lsls	r3, r3, #18
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x624>
 8001cda:	e050      	b.n	8001d7e <HAL_RCC_OscConfig+0x6e6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001ce2:	4913      	ldr	r1, [pc, #76]	; (8001d30 <HAL_RCC_OscConfig+0x698>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7fe fea2 	bl	8000a30 <HAL_GetTick>
 8001cec:	0003      	movs	r3, r0
 8001cee:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x66c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7fe fe9d 	bl	8000a30 <HAL_GetTick>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x66c>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e03d      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_RCC_OscConfig+0x67c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	049b      	lsls	r3, r3, #18
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d1f0      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x65a>
 8001d10:	e035      	b.n	8001d7e <HAL_RCC_OscConfig+0x6e6>
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	40021000 	.word	0x40021000
 8001d18:	ffff1fff 	.word	0xffff1fff
 8001d1c:	fffffeff 	.word	0xfffffeff
 8001d20:	40007000 	.word	0x40007000
 8001d24:	fffffbff 	.word	0xfffffbff
 8001d28:	00001388 	.word	0x00001388
 8001d2c:	efffffff 	.word	0xefffffff
 8001d30:	feffffff 	.word	0xfeffffff
 8001d34:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_OscConfig+0x6ac>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e01d      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d44:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <HAL_RCC_OscConfig+0x6f0>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	025b      	lsls	r3, r3, #9
 8001d50:	401a      	ands	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d10f      	bne.n	8001d7a <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	23f0      	movs	r3, #240	; 0xf0
 8001d5e:	039b      	lsls	r3, r3, #14
 8001d60:	401a      	ands	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_OscConfig+0x6e2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	23c0      	movs	r3, #192	; 0xc0
 8001d6e:	041b      	lsls	r3, r3, #16
 8001d70:	401a      	ands	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x6e6>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_RCC_OscConfig+0x6e8>
        }
      }
    }
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b00a      	add	sp, #40	; 0x28
 8001d86:	bdb0      	pop	{r4, r5, r7, pc}
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b5b0      	push	{r4, r5, r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e10d      	b.n	8001fbc <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_ClockConfig+0x238>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	4013      	ands	r3, r2
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d911      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <HAL_RCC_ClockConfig+0x238>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2201      	movs	r2, #1
 8001db4:	4393      	bics	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	4b82      	ldr	r3, [pc, #520]	; (8001fc4 <HAL_RCC_ClockConfig+0x238>)
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc0:	4b80      	ldr	r3, [pc, #512]	; (8001fc4 <HAL_RCC_ClockConfig+0x238>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0f4      	b.n	8001fbc <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d009      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ddc:	4b7a      	ldr	r3, [pc, #488]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	22f0      	movs	r2, #240	; 0xf0
 8001de2:	4393      	bics	r3, r2
 8001de4:	0019      	movs	r1, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	4b77      	ldr	r3, [pc, #476]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001dec:	430a      	orrs	r2, r1
 8001dee:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2201      	movs	r2, #1
 8001df6:	4013      	ands	r3, r2
 8001df8:	d100      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x70>
 8001dfa:	e089      	b.n	8001f10 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e04:	4b70      	ldr	r3, [pc, #448]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	029b      	lsls	r3, r3, #10
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d120      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0d3      	b.n	8001fbc <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	049b      	lsls	r3, r3, #18
 8001e24:	4013      	ands	r3, r2
 8001e26:	d114      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0c7      	b.n	8001fbc <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e34:	4b64      	ldr	r3, [pc, #400]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0bc      	b.n	8001fbc <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e42:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0b4      	b.n	8001fbc <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e52:	4b5d      	ldr	r3, [pc, #372]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2203      	movs	r2, #3
 8001e58:	4393      	bics	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e66:	f7fe fde3 	bl	8000a30 <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d111      	bne.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e76:	e009      	b.n	8001e8c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e78:	f7fe fdda 	bl	8000a30 <HAL_GetTick>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	4a52      	ldr	r2, [pc, #328]	; (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e097      	b.n	8001fbc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e8c:	4b4e      	ldr	r3, [pc, #312]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	220c      	movs	r2, #12
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d1ef      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xec>
 8001e98:	e03a      	b.n	8001f10 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d111      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea2:	e009      	b.n	8001eb8 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7fe fdc4 	bl	8000a30 <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	4a47      	ldr	r2, [pc, #284]	; (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e081      	b.n	8001fbc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb8:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	d1ef      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x118>
 8001ec4:	e024      	b.n	8001f10 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d11b      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ece:	e009      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed0:	f7fe fdae 	bl	8000a30 <HAL_GetTick>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	4a3c      	ldr	r2, [pc, #240]	; (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e06b      	b.n	8001fbc <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee4:	4b38      	ldr	r3, [pc, #224]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	220c      	movs	r2, #12
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d1ef      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x144>
 8001ef0:	e00e      	b.n	8001f10 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef2:	f7fe fd9d 	bl	8000a30 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	4a33      	ldr	r2, [pc, #204]	; (8001fcc <HAL_RCC_ClockConfig+0x240>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e05a      	b.n	8001fbc <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f06:	4b30      	ldr	r3, [pc, #192]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <HAL_RCC_ClockConfig+0x238>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2201      	movs	r2, #1
 8001f16:	4013      	ands	r3, r2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d211      	bcs.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_RCC_ClockConfig+0x238>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	4393      	bics	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <HAL_RCC_ClockConfig+0x238>)
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_ClockConfig+0x238>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4013      	ands	r3, r2
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e03c      	b.n	8001fbc <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2204      	movs	r2, #4
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <HAL_RCC_ClockConfig+0x244>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2208      	movs	r2, #8
 8001f66:	4013      	ands	r3, r2
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <HAL_RCC_ClockConfig+0x248>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	0019      	movs	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	00da      	lsls	r2, r3, #3
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f80:	f000 f82e 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8001f84:	0001      	movs	r1, r0
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <HAL_RCC_ClockConfig+0x23c>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	4013      	ands	r3, r2
 8001f90:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <HAL_RCC_ClockConfig+0x24c>)
 8001f92:	5cd3      	ldrb	r3, [r2, r3]
 8001f94:	000a      	movs	r2, r1
 8001f96:	40da      	lsrs	r2, r3
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_RCC_ClockConfig+0x250>)
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001f9c:	250b      	movs	r5, #11
 8001f9e:	197c      	adds	r4, r7, r5
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7fe fcff 	bl	80009a4 <HAL_InitTick>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001faa:	197b      	adds	r3, r7, r5
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001fb2:	230b      	movs	r3, #11
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	e000      	b.n	8001fbc <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b004      	add	sp, #16
 8001fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	00001388 	.word	0x00001388
 8001fd0:	fffff8ff 	.word	0xfffff8ff
 8001fd4:	ffffc7ff 	.word	0xffffc7ff
 8001fd8:	08002cf8 	.word	0x08002cf8
 8001fdc:	20000000 	.word	0x20000000

08001fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001fe6:	4b3b      	ldr	r3, [pc, #236]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	220c      	movs	r2, #12
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d00e      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x34>
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d00f      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0x3a>
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d157      	bne.n	80020ae <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ffe:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2210      	movs	r2, #16
 8002004:	4013      	ands	r3, r2
 8002006:	d002      	beq.n	800200e <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002008:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800200a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800200c:	e05d      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800200e:	4b33      	ldr	r3, [pc, #204]	; (80020dc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002010:	613b      	str	r3, [r7, #16]
      break;
 8002012:	e05a      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002014:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002016:	613b      	str	r3, [r7, #16]
      break;
 8002018:	e057      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	0c9b      	lsrs	r3, r3, #18
 800201e:	220f      	movs	r2, #15
 8002020:	4013      	ands	r3, r2
 8002022:	4a30      	ldr	r2, [pc, #192]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002024:	5cd3      	ldrb	r3, [r2, r3]
 8002026:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	0d9b      	lsrs	r3, r3, #22
 800202c:	2203      	movs	r2, #3
 800202e:	4013      	ands	r3, r2
 8002030:	3301      	adds	r3, #1
 8002032:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	025b      	lsls	r3, r3, #9
 800203c:	4013      	ands	r3, r2
 800203e:	d00f      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	000a      	movs	r2, r1
 8002044:	0152      	lsls	r2, r2, #5
 8002046:	1a52      	subs	r2, r2, r1
 8002048:	0193      	lsls	r3, r2, #6
 800204a:	1a9b      	subs	r3, r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	185b      	adds	r3, r3, r1
 8002050:	025b      	lsls	r3, r3, #9
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	0018      	movs	r0, r3
 8002056:	f7fe f857 	bl	8000108 <__udivsi3>
 800205a:	0003      	movs	r3, r0
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	e023      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002060:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2210      	movs	r2, #16
 8002066:	4013      	ands	r3, r2
 8002068:	d00f      	beq.n	800208a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800206a:	68b9      	ldr	r1, [r7, #8]
 800206c:	000a      	movs	r2, r1
 800206e:	0152      	lsls	r2, r2, #5
 8002070:	1a52      	subs	r2, r2, r1
 8002072:	0193      	lsls	r3, r2, #6
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	185b      	adds	r3, r3, r1
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	0018      	movs	r0, r3
 8002080:	f7fe f842 	bl	8000108 <__udivsi3>
 8002084:	0003      	movs	r3, r0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	e00e      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	000a      	movs	r2, r1
 800208e:	0152      	lsls	r2, r2, #5
 8002090:	1a52      	subs	r2, r2, r1
 8002092:	0193      	lsls	r3, r2, #6
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	185b      	adds	r3, r3, r1
 800209a:	029b      	lsls	r3, r3, #10
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	0018      	movs	r0, r3
 80020a0:	f7fe f832 	bl	8000108 <__udivsi3>
 80020a4:	0003      	movs	r3, r0
 80020a6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
      break;
 80020ac:	e00d      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	0b5b      	lsrs	r3, r3, #13
 80020b4:	2207      	movs	r2, #7
 80020b6:	4013      	ands	r3, r2
 80020b8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	0212      	lsls	r2, r2, #8
 80020c2:	409a      	lsls	r2, r3
 80020c4:	0013      	movs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
      break;
 80020c8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020ca:	693b      	ldr	r3, [r7, #16]
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b006      	add	sp, #24
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	003d0900 	.word	0x003d0900
 80020dc:	00f42400 	.word	0x00f42400
 80020e0:	007a1200 	.word	0x007a1200
 80020e4:	08002d10 	.word	0x08002d10

080020e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ec:	4b02      	ldr	r3, [pc, #8]	; (80020f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	20000000 	.word	0x20000000

080020fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002100:	f7ff fff2 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002104:	0001      	movs	r1, r0
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	2207      	movs	r2, #7
 800210e:	4013      	ands	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	40d9      	lsrs	r1, r3
 8002116:	000b      	movs	r3, r1
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	40021000 	.word	0x40021000
 8002124:	08002d08 	.word	0x08002d08

08002128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800212c:	f7ff ffdc 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002130:	0001      	movs	r1, r0
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	0adb      	lsrs	r3, r3, #11
 8002138:	2207      	movs	r2, #7
 800213a:	4013      	ands	r3, r2
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x28>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	40d9      	lsrs	r1, r3
 8002142:	000b      	movs	r3, r1
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	40021000 	.word	0x40021000
 8002150:	08002d08 	.word	0x08002d08

08002154 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2220      	movs	r2, #32
 8002162:	4013      	ands	r3, r2
 8002164:	d100      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8002166:	e0c7      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002168:	2317      	movs	r3, #23
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002170:	4b82      	ldr	r3, [pc, #520]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	055b      	lsls	r3, r3, #21
 8002178:	4013      	ands	r3, r2
 800217a:	d10a      	bne.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217c:	4b7f      	ldr	r3, [pc, #508]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800217e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002180:	4b7e      	ldr	r3, [pc, #504]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002182:	2180      	movs	r1, #128	; 0x80
 8002184:	0549      	lsls	r1, r1, #21
 8002186:	430a      	orrs	r2, r1
 8002188:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800218a:	2317      	movs	r3, #23
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	4b7b      	ldr	r3, [pc, #492]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4013      	ands	r3, r2
 800219c:	d11a      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219e:	4b78      	ldr	r3, [pc, #480]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b77      	ldr	r3, [pc, #476]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	0049      	lsls	r1, r1, #1
 80021a8:	430a      	orrs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ac:	f7fe fc40 	bl	8000a30 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	e008      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b6:	f7fe fc3b 	bl	8000a30 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b64      	cmp	r3, #100	; 0x64
 80021c2:	d901      	bls.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0d4      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4013      	ands	r3, r2
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80021d4:	4b69      	ldr	r3, [pc, #420]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	23c0      	movs	r3, #192	; 0xc0
 80021da:	039b      	lsls	r3, r3, #14
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	23c0      	movs	r3, #192	; 0xc0
 80021e6:	039b      	lsls	r3, r3, #14
 80021e8:	4013      	ands	r3, r2
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d013      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	23c0      	movs	r3, #192	; 0xc0
 80021f6:	029b      	lsls	r3, r3, #10
 80021f8:	401a      	ands	r2, r3
 80021fa:	23c0      	movs	r3, #192	; 0xc0
 80021fc:	029b      	lsls	r3, r3, #10
 80021fe:	429a      	cmp	r2, r3
 8002200:	d10a      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002202:	4b5e      	ldr	r3, [pc, #376]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	029b      	lsls	r3, r3, #10
 800220a:	401a      	ands	r2, r3
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	029b      	lsls	r3, r3, #10
 8002210:	429a      	cmp	r2, r3
 8002212:	d101      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0ac      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002218:	4b58      	ldr	r3, [pc, #352]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800221a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800221c:	23c0      	movs	r3, #192	; 0xc0
 800221e:	029b      	lsls	r3, r3, #10
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d03b      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	23c0      	movs	r3, #192	; 0xc0
 8002230:	029b      	lsls	r3, r3, #10
 8002232:	4013      	ands	r3, r2
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	429a      	cmp	r2, r3
 8002238:	d033      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2220      	movs	r2, #32
 8002240:	4013      	ands	r3, r2
 8002242:	d02e      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002244:	4b4d      	ldr	r3, [pc, #308]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002248:	4a4e      	ldr	r2, [pc, #312]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800224a:	4013      	ands	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800224e:	4b4b      	ldr	r3, [pc, #300]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002252:	4b4a      	ldr	r3, [pc, #296]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	0309      	lsls	r1, r1, #12
 8002258:	430a      	orrs	r2, r1
 800225a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800225c:	4b47      	ldr	r3, [pc, #284]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800225e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002260:	4b46      	ldr	r3, [pc, #280]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002262:	4949      	ldr	r1, [pc, #292]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002264:	400a      	ands	r2, r1
 8002266:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002268:	4b44      	ldr	r3, [pc, #272]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4013      	ands	r3, r2
 8002276:	d014      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7fe fbda 	bl	8000a30 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002280:	e009      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fbd5 	bl	8000a30 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	4a3f      	ldr	r2, [pc, #252]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e06d      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4013      	ands	r3, r2
 80022a0:	d0ef      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	23c0      	movs	r3, #192	; 0xc0
 80022a8:	029b      	lsls	r3, r3, #10
 80022aa:	401a      	ands	r2, r3
 80022ac:	23c0      	movs	r3, #192	; 0xc0
 80022ae:	029b      	lsls	r3, r3, #10
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d10c      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a35      	ldr	r2, [pc, #212]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	0019      	movs	r1, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	23c0      	movs	r3, #192	; 0xc0
 80022c4:	039b      	lsls	r3, r3, #14
 80022c6:	401a      	ands	r2, r3
 80022c8:	4b2c      	ldr	r3, [pc, #176]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80022d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	23c0      	movs	r3, #192	; 0xc0
 80022d8:	029b      	lsls	r3, r3, #10
 80022da:	401a      	ands	r2, r3
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80022de:	430a      	orrs	r2, r1
 80022e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022e2:	2317      	movs	r3, #23
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ec:	4b23      	ldr	r3, [pc, #140]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80022ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80022f2:	4928      	ldr	r1, [pc, #160]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022f4:	400a      	ands	r2, r1
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2202      	movs	r2, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002302:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	220c      	movs	r2, #12
 8002308:	4393      	bics	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002312:	430a      	orrs	r2, r1
 8002314:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2204      	movs	r2, #4
 800231c:	4013      	ands	r3, r2
 800231e:	d009      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002324:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002326:	4013      	ands	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002330:	430a      	orrs	r2, r1
 8002332:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2208      	movs	r2, #8
 800233a:	4013      	ands	r3, r2
 800233c:	d009      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	4a16      	ldr	r2, [pc, #88]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002344:	4013      	ands	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800234e:	430a      	orrs	r2, r1
 8002350:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	4013      	ands	r3, r2
 800235a:	d009      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800235c:	4b07      	ldr	r3, [pc, #28]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800235e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002360:	4a0f      	ldr	r2, [pc, #60]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002362:	4013      	ands	r3, r2
 8002364:	0019      	movs	r1, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800236c:	430a      	orrs	r2, r1
 800236e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	0018      	movs	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	b006      	add	sp, #24
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	40021000 	.word	0x40021000
 8002380:	40007000 	.word	0x40007000
 8002384:	fffcffff 	.word	0xfffcffff
 8002388:	fff7ffff 	.word	0xfff7ffff
 800238c:	00001388 	.word	0x00001388
 8002390:	ffcfffff 	.word	0xffcfffff
 8002394:	efffffff 	.word	0xefffffff
 8002398:	fffff3ff 	.word	0xfffff3ff
 800239c:	ffffcfff 	.word	0xffffcfff
 80023a0:	fff3ffff 	.word	0xfff3ffff

080023a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e044      	b.n	8002440 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d107      	bne.n	80023ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2270      	movs	r2, #112	; 0x70
 80023c2:	2100      	movs	r1, #0
 80023c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7fe fa03 	bl	80007d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2224      	movs	r2, #36	; 0x24
 80023d2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2101      	movs	r1, #1
 80023e0:	438a      	bics	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 f830 	bl	800244c <UART_SetConfig>
 80023ec:	0003      	movs	r3, r0
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e024      	b.n	8002440 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	0018      	movs	r0, r3
 8002402:	f000 fafd 	bl	8002a00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	490d      	ldr	r1, [pc, #52]	; (8002448 <HAL_UART_Init+0xa4>)
 8002412:	400a      	ands	r2, r1
 8002414:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	212a      	movs	r1, #42	; 0x2a
 8002422:	438a      	bics	r2, r1
 8002424:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	430a      	orrs	r2, r1
 8002434:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f000 fb95 	bl	8002b68 <UART_CheckIdleState>
 800243e:	0003      	movs	r3, r0
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}
 8002448:	ffffb7ff 	.word	0xffffb7ff

0800244c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800244c:	b5b0      	push	{r4, r5, r7, lr}
 800244e:	b08e      	sub	sp, #56	; 0x38
 8002450:	af00      	add	r7, sp, #0
 8002452:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002454:	231b      	movs	r3, #27
 8002456:	2218      	movs	r2, #24
 8002458:	4694      	mov	ip, r2
 800245a:	44bc      	add	ip, r7
 800245c:	4463      	add	r3, ip
 800245e:	2210      	movs	r2, #16
 8002460:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8002462:	2300      	movs	r3, #0
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8002466:	2313      	movs	r3, #19
 8002468:	2218      	movs	r2, #24
 800246a:	4694      	mov	ip, r2
 800246c:	44bc      	add	ip, r7
 800246e:	4463      	add	r3, ip
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	431a      	orrs	r2, r3
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	431a      	orrs	r2, r3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	4313      	orrs	r3, r2
 800248e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4ace      	ldr	r2, [pc, #824]	; (80027d0 <UART_SetConfig+0x384>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4ac9      	ldr	r2, [pc, #804]	; (80027d4 <UART_SetConfig+0x388>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4ac3      	ldr	r2, [pc, #780]	; (80027d8 <UART_SetConfig+0x38c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024d4:	4313      	orrs	r3, r2
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4abf      	ldr	r2, [pc, #764]	; (80027dc <UART_SetConfig+0x390>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ea:	430a      	orrs	r2, r1
 80024ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4abb      	ldr	r2, [pc, #748]	; (80027e0 <UART_SetConfig+0x394>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d137      	bne.n	8002568 <UART_SetConfig+0x11c>
 80024f8:	4bba      	ldr	r3, [pc, #744]	; (80027e4 <UART_SetConfig+0x398>)
 80024fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fc:	220c      	movs	r2, #12
 80024fe:	4013      	ands	r3, r2
 8002500:	2b04      	cmp	r3, #4
 8002502:	d018      	beq.n	8002536 <UART_SetConfig+0xea>
 8002504:	d802      	bhi.n	800250c <UART_SetConfig+0xc0>
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <UART_SetConfig+0xca>
 800250a:	e024      	b.n	8002556 <UART_SetConfig+0x10a>
 800250c:	2b08      	cmp	r3, #8
 800250e:	d00a      	beq.n	8002526 <UART_SetConfig+0xda>
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d018      	beq.n	8002546 <UART_SetConfig+0xfa>
 8002514:	e01f      	b.n	8002556 <UART_SetConfig+0x10a>
 8002516:	231b      	movs	r3, #27
 8002518:	2218      	movs	r2, #24
 800251a:	4694      	mov	ip, r2
 800251c:	44bc      	add	ip, r7
 800251e:	4463      	add	r3, ip
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	e06e      	b.n	8002604 <UART_SetConfig+0x1b8>
 8002526:	231b      	movs	r3, #27
 8002528:	2218      	movs	r2, #24
 800252a:	4694      	mov	ip, r2
 800252c:	44bc      	add	ip, r7
 800252e:	4463      	add	r3, ip
 8002530:	2202      	movs	r2, #2
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e066      	b.n	8002604 <UART_SetConfig+0x1b8>
 8002536:	231b      	movs	r3, #27
 8002538:	2218      	movs	r2, #24
 800253a:	4694      	mov	ip, r2
 800253c:	44bc      	add	ip, r7
 800253e:	4463      	add	r3, ip
 8002540:	2204      	movs	r2, #4
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e05e      	b.n	8002604 <UART_SetConfig+0x1b8>
 8002546:	231b      	movs	r3, #27
 8002548:	2218      	movs	r2, #24
 800254a:	4694      	mov	ip, r2
 800254c:	44bc      	add	ip, r7
 800254e:	4463      	add	r3, ip
 8002550:	2208      	movs	r2, #8
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e056      	b.n	8002604 <UART_SetConfig+0x1b8>
 8002556:	231b      	movs	r3, #27
 8002558:	2218      	movs	r2, #24
 800255a:	4694      	mov	ip, r2
 800255c:	44bc      	add	ip, r7
 800255e:	4463      	add	r3, ip
 8002560:	2210      	movs	r2, #16
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	e04d      	b.n	8002604 <UART_SetConfig+0x1b8>
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a9a      	ldr	r2, [pc, #616]	; (80027d8 <UART_SetConfig+0x38c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d141      	bne.n	80025f6 <UART_SetConfig+0x1aa>
 8002572:	4b9c      	ldr	r3, [pc, #624]	; (80027e4 <UART_SetConfig+0x398>)
 8002574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002576:	23c0      	movs	r3, #192	; 0xc0
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	4013      	ands	r3, r2
 800257c:	2280      	movs	r2, #128	; 0x80
 800257e:	00d2      	lsls	r2, r2, #3
 8002580:	4293      	cmp	r3, r2
 8002582:	d01f      	beq.n	80025c4 <UART_SetConfig+0x178>
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	00d2      	lsls	r2, r2, #3
 8002588:	4293      	cmp	r3, r2
 800258a:	d802      	bhi.n	8002592 <UART_SetConfig+0x146>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <UART_SetConfig+0x158>
 8002590:	e028      	b.n	80025e4 <UART_SetConfig+0x198>
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	0112      	lsls	r2, r2, #4
 8002596:	4293      	cmp	r3, r2
 8002598:	d00c      	beq.n	80025b4 <UART_SetConfig+0x168>
 800259a:	22c0      	movs	r2, #192	; 0xc0
 800259c:	0112      	lsls	r2, r2, #4
 800259e:	4293      	cmp	r3, r2
 80025a0:	d018      	beq.n	80025d4 <UART_SetConfig+0x188>
 80025a2:	e01f      	b.n	80025e4 <UART_SetConfig+0x198>
 80025a4:	231b      	movs	r3, #27
 80025a6:	2218      	movs	r2, #24
 80025a8:	4694      	mov	ip, r2
 80025aa:	44bc      	add	ip, r7
 80025ac:	4463      	add	r3, ip
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e027      	b.n	8002604 <UART_SetConfig+0x1b8>
 80025b4:	231b      	movs	r3, #27
 80025b6:	2218      	movs	r2, #24
 80025b8:	4694      	mov	ip, r2
 80025ba:	44bc      	add	ip, r7
 80025bc:	4463      	add	r3, ip
 80025be:	2202      	movs	r2, #2
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	e01f      	b.n	8002604 <UART_SetConfig+0x1b8>
 80025c4:	231b      	movs	r3, #27
 80025c6:	2218      	movs	r2, #24
 80025c8:	4694      	mov	ip, r2
 80025ca:	44bc      	add	ip, r7
 80025cc:	4463      	add	r3, ip
 80025ce:	2204      	movs	r2, #4
 80025d0:	701a      	strb	r2, [r3, #0]
 80025d2:	e017      	b.n	8002604 <UART_SetConfig+0x1b8>
 80025d4:	231b      	movs	r3, #27
 80025d6:	2218      	movs	r2, #24
 80025d8:	4694      	mov	ip, r2
 80025da:	44bc      	add	ip, r7
 80025dc:	4463      	add	r3, ip
 80025de:	2208      	movs	r2, #8
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	e00f      	b.n	8002604 <UART_SetConfig+0x1b8>
 80025e4:	231b      	movs	r3, #27
 80025e6:	2218      	movs	r2, #24
 80025e8:	4694      	mov	ip, r2
 80025ea:	44bc      	add	ip, r7
 80025ec:	4463      	add	r3, ip
 80025ee:	2210      	movs	r2, #16
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	e006      	b.n	8002604 <UART_SetConfig+0x1b8>
 80025f6:	231b      	movs	r3, #27
 80025f8:	2218      	movs	r2, #24
 80025fa:	4694      	mov	ip, r2
 80025fc:	44bc      	add	ip, r7
 80025fe:	4463      	add	r3, ip
 8002600:	2210      	movs	r2, #16
 8002602:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a73      	ldr	r2, [pc, #460]	; (80027d8 <UART_SetConfig+0x38c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d000      	beq.n	8002610 <UART_SetConfig+0x1c4>
 800260e:	e083      	b.n	8002718 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002610:	231b      	movs	r3, #27
 8002612:	2218      	movs	r2, #24
 8002614:	4694      	mov	ip, r2
 8002616:	44bc      	add	ip, r7
 8002618:	4463      	add	r3, ip
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d00d      	beq.n	800263c <UART_SetConfig+0x1f0>
 8002620:	dc02      	bgt.n	8002628 <UART_SetConfig+0x1dc>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <UART_SetConfig+0x1e6>
 8002626:	e01d      	b.n	8002664 <UART_SetConfig+0x218>
 8002628:	2b04      	cmp	r3, #4
 800262a:	d012      	beq.n	8002652 <UART_SetConfig+0x206>
 800262c:	2b08      	cmp	r3, #8
 800262e:	d015      	beq.n	800265c <UART_SetConfig+0x210>
 8002630:	e018      	b.n	8002664 <UART_SetConfig+0x218>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002632:	f7ff fd63 	bl	80020fc <HAL_RCC_GetPCLK1Freq>
 8002636:	0003      	movs	r3, r0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800263a:	e01b      	b.n	8002674 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800263c:	4b69      	ldr	r3, [pc, #420]	; (80027e4 <UART_SetConfig+0x398>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2210      	movs	r2, #16
 8002642:	4013      	ands	r3, r2
 8002644:	d002      	beq.n	800264c <UART_SetConfig+0x200>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8002646:	4b68      	ldr	r3, [pc, #416]	; (80027e8 <UART_SetConfig+0x39c>)
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800264a:	e013      	b.n	8002674 <UART_SetConfig+0x228>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800264c:	4b67      	ldr	r3, [pc, #412]	; (80027ec <UART_SetConfig+0x3a0>)
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002650:	e010      	b.n	8002674 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002652:	f7ff fcc5 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8002656:	0003      	movs	r3, r0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800265a:	e00b      	b.n	8002674 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002662:	e007      	b.n	8002674 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002664:	2313      	movs	r3, #19
 8002666:	2218      	movs	r2, #24
 8002668:	4694      	mov	ip, r2
 800266a:	44bc      	add	ip, r7
 800266c:	4463      	add	r3, ip
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
        break;
 8002672:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	2b00      	cmp	r3, #0
 8002678:	d100      	bne.n	800267c <UART_SetConfig+0x230>
 800267a:	e1a7      	b.n	80029cc <UART_SetConfig+0x580>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	0013      	movs	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	189b      	adds	r3, r3, r2
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	429a      	cmp	r2, r3
 800268a:	d305      	bcc.n	8002698 <UART_SetConfig+0x24c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002694:	429a      	cmp	r2, r3
 8002696:	d907      	bls.n	80026a8 <UART_SetConfig+0x25c>
      {
        ret = HAL_ERROR;
 8002698:	2313      	movs	r3, #19
 800269a:	2218      	movs	r2, #24
 800269c:	4694      	mov	ip, r2
 800269e:	44bc      	add	ip, r7
 80026a0:	4463      	add	r3, ip
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e191      	b.n	80029cc <UART_SetConfig+0x580>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	6939      	ldr	r1, [r7, #16]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	000b      	movs	r3, r1
 80026b6:	0e1b      	lsrs	r3, r3, #24
 80026b8:	0010      	movs	r0, r2
 80026ba:	0205      	lsls	r5, r0, #8
 80026bc:	431d      	orrs	r5, r3
 80026be:	000b      	movs	r3, r1
 80026c0:	021c      	lsls	r4, r3, #8
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68b8      	ldr	r0, [r7, #8]
 80026d0:	68f9      	ldr	r1, [r7, #12]
 80026d2:	1900      	adds	r0, r0, r4
 80026d4:	4169      	adcs	r1, r5
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	2300      	movs	r3, #0
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f7fd fd9c 	bl	8000220 <__aeabi_uldivmod>
 80026e8:	0003      	movs	r3, r0
 80026ea:	000c      	movs	r4, r1
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	4a3f      	ldr	r2, [pc, #252]	; (80027f0 <UART_SetConfig+0x3a4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d908      	bls.n	8002708 <UART_SetConfig+0x2bc>
 80026f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f8:	4a3e      	ldr	r2, [pc, #248]	; (80027f4 <UART_SetConfig+0x3a8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d804      	bhi.n	8002708 <UART_SetConfig+0x2bc>
        {
          huart->Instance->BRR = usartdiv;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	e161      	b.n	80029cc <UART_SetConfig+0x580>
        }
        else
        {
          ret = HAL_ERROR;
 8002708:	2313      	movs	r3, #19
 800270a:	2218      	movs	r2, #24
 800270c:	4694      	mov	ip, r2
 800270e:	44bc      	add	ip, r7
 8002710:	4463      	add	r3, ip
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	e159      	b.n	80029cc <UART_SetConfig+0x580>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	429a      	cmp	r2, r3
 8002722:	d000      	beq.n	8002726 <UART_SetConfig+0x2da>
 8002724:	e0c4      	b.n	80028b0 <UART_SetConfig+0x464>
  {
    switch (clocksource)
 8002726:	231b      	movs	r3, #27
 8002728:	2218      	movs	r2, #24
 800272a:	4694      	mov	ip, r2
 800272c:	44bc      	add	ip, r7
 800272e:	4463      	add	r3, ip
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b08      	cmp	r3, #8
 8002734:	d900      	bls.n	8002738 <UART_SetConfig+0x2ec>
 8002736:	e087      	b.n	8002848 <UART_SetConfig+0x3fc>
 8002738:	009a      	lsls	r2, r3, #2
 800273a:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <UART_SetConfig+0x3ac>)
 800273c:	18d3      	adds	r3, r2, r3
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002742:	f7ff fcdb 	bl	80020fc <HAL_RCC_GetPCLK1Freq>
 8002746:	0003      	movs	r3, r0
 8002748:	005a      	lsls	r2, r3, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	18d2      	adds	r2, r2, r3
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	0019      	movs	r1, r3
 8002758:	0010      	movs	r0, r2
 800275a:	f7fd fcd5 	bl	8000108 <__udivsi3>
 800275e:	0003      	movs	r3, r0
 8002760:	b29b      	uxth	r3, r3
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002764:	e078      	b.n	8002858 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002766:	f7ff fcdf 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 800276a:	0003      	movs	r3, r0
 800276c:	005a      	lsls	r2, r3, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	18d2      	adds	r2, r2, r3
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	0019      	movs	r1, r3
 800277c:	0010      	movs	r0, r2
 800277e:	f7fd fcc3 	bl	8000108 <__udivsi3>
 8002782:	0003      	movs	r3, r0
 8002784:	b29b      	uxth	r3, r3
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002788:	e066      	b.n	8002858 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800278a:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <UART_SetConfig+0x398>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2210      	movs	r2, #16
 8002790:	4013      	ands	r3, r2
 8002792:	d00e      	beq.n	80027b2 <UART_SetConfig+0x366>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	4a18      	ldr	r2, [pc, #96]	; (80027fc <UART_SetConfig+0x3b0>)
 800279c:	189a      	adds	r2, r3, r2
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	0019      	movs	r1, r3
 80027a4:	0010      	movs	r0, r2
 80027a6:	f7fd fcaf 	bl	8000108 <__udivsi3>
 80027aa:	0003      	movs	r3, r0
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80027b0:	e052      	b.n	8002858 <UART_SetConfig+0x40c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	4a11      	ldr	r2, [pc, #68]	; (8002800 <UART_SetConfig+0x3b4>)
 80027ba:	189a      	adds	r2, r3, r2
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	0019      	movs	r1, r3
 80027c2:	0010      	movs	r0, r2
 80027c4:	f7fd fca0 	bl	8000108 <__udivsi3>
 80027c8:	0003      	movs	r3, r0
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027ce:	e043      	b.n	8002858 <UART_SetConfig+0x40c>
 80027d0:	efff69f3 	.word	0xefff69f3
 80027d4:	ffffcfff 	.word	0xffffcfff
 80027d8:	40004800 	.word	0x40004800
 80027dc:	fffff4ff 	.word	0xfffff4ff
 80027e0:	40004400 	.word	0x40004400
 80027e4:	40021000 	.word	0x40021000
 80027e8:	003d0900 	.word	0x003d0900
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	000002ff 	.word	0x000002ff
 80027f4:	000fffff 	.word	0x000fffff
 80027f8:	08002d1c 	.word	0x08002d1c
 80027fc:	007a1200 	.word	0x007a1200
 8002800:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002804:	f7ff fbec 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8002808:	0003      	movs	r3, r0
 800280a:	005a      	lsls	r2, r3, #1
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	18d2      	adds	r2, r2, r3
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	0019      	movs	r1, r3
 800281a:	0010      	movs	r0, r2
 800281c:	f7fd fc74 	bl	8000108 <__udivsi3>
 8002820:	0003      	movs	r3, r0
 8002822:	b29b      	uxth	r3, r3
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002826:	e017      	b.n	8002858 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	2280      	movs	r2, #128	; 0x80
 8002830:	0252      	lsls	r2, r2, #9
 8002832:	189a      	adds	r2, r3, r2
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	0019      	movs	r1, r3
 800283a:	0010      	movs	r0, r2
 800283c:	f7fd fc64 	bl	8000108 <__udivsi3>
 8002840:	0003      	movs	r3, r0
 8002842:	b29b      	uxth	r3, r3
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002846:	e007      	b.n	8002858 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002848:	2313      	movs	r3, #19
 800284a:	2218      	movs	r2, #24
 800284c:	4694      	mov	ip, r2
 800284e:	44bc      	add	ip, r7
 8002850:	4463      	add	r3, ip
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
        break;
 8002856:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285a:	2b0f      	cmp	r3, #15
 800285c:	d920      	bls.n	80028a0 <UART_SetConfig+0x454>
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	4a62      	ldr	r2, [pc, #392]	; (80029ec <UART_SetConfig+0x5a0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d81c      	bhi.n	80028a0 <UART_SetConfig+0x454>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	b29a      	uxth	r2, r3
 800286a:	200a      	movs	r0, #10
 800286c:	2418      	movs	r4, #24
 800286e:	193b      	adds	r3, r7, r4
 8002870:	181b      	adds	r3, r3, r0
 8002872:	210f      	movs	r1, #15
 8002874:	438a      	bics	r2, r1
 8002876:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	b29b      	uxth	r3, r3
 800287e:	2207      	movs	r2, #7
 8002880:	4013      	ands	r3, r2
 8002882:	b299      	uxth	r1, r3
 8002884:	193b      	adds	r3, r7, r4
 8002886:	181b      	adds	r3, r3, r0
 8002888:	193a      	adds	r2, r7, r4
 800288a:	1812      	adds	r2, r2, r0
 800288c:	8812      	ldrh	r2, [r2, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	193a      	adds	r2, r7, r4
 8002898:	1812      	adds	r2, r2, r0
 800289a:	8812      	ldrh	r2, [r2, #0]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	e095      	b.n	80029cc <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 80028a0:	2313      	movs	r3, #19
 80028a2:	2218      	movs	r2, #24
 80028a4:	4694      	mov	ip, r2
 80028a6:	44bc      	add	ip, r7
 80028a8:	4463      	add	r3, ip
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
 80028ae:	e08d      	b.n	80029cc <UART_SetConfig+0x580>
    }
  }
  else
  {
    switch (clocksource)
 80028b0:	231b      	movs	r3, #27
 80028b2:	2218      	movs	r2, #24
 80028b4:	4694      	mov	ip, r2
 80028b6:	44bc      	add	ip, r7
 80028b8:	4463      	add	r3, ip
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d86a      	bhi.n	8002996 <UART_SetConfig+0x54a>
 80028c0:	009a      	lsls	r2, r3, #2
 80028c2:	4b4b      	ldr	r3, [pc, #300]	; (80029f0 <UART_SetConfig+0x5a4>)
 80028c4:	18d3      	adds	r3, r2, r3
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80028ca:	f7ff fc17 	bl	80020fc <HAL_RCC_GetPCLK1Freq>
 80028ce:	0002      	movs	r2, r0
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	18d2      	adds	r2, r2, r3
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	0019      	movs	r1, r3
 80028de:	0010      	movs	r0, r2
 80028e0:	f7fd fc12 	bl	8000108 <__udivsi3>
 80028e4:	0003      	movs	r3, r0
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028ea:	e05c      	b.n	80029a6 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80028ec:	f7ff fc1c 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 80028f0:	0002      	movs	r2, r0
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	085b      	lsrs	r3, r3, #1
 80028f8:	18d2      	adds	r2, r2, r3
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	0019      	movs	r1, r3
 8002900:	0010      	movs	r0, r2
 8002902:	f7fd fc01 	bl	8000108 <__udivsi3>
 8002906:	0003      	movs	r3, r0
 8002908:	b29b      	uxth	r3, r3
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800290c:	e04b      	b.n	80029a6 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800290e:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <UART_SetConfig+0x5a8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2210      	movs	r2, #16
 8002914:	4013      	ands	r3, r2
 8002916:	d00e      	beq.n	8002936 <UART_SetConfig+0x4ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	085b      	lsrs	r3, r3, #1
 800291e:	4a36      	ldr	r2, [pc, #216]	; (80029f8 <UART_SetConfig+0x5ac>)
 8002920:	189a      	adds	r2, r3, r2
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	0019      	movs	r1, r3
 8002928:	0010      	movs	r0, r2
 800292a:	f7fd fbed 	bl	8000108 <__udivsi3>
 800292e:	0003      	movs	r3, r0
 8002930:	b29b      	uxth	r3, r3
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002934:	e037      	b.n	80029a6 <UART_SetConfig+0x55a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	085b      	lsrs	r3, r3, #1
 800293c:	4a2f      	ldr	r2, [pc, #188]	; (80029fc <UART_SetConfig+0x5b0>)
 800293e:	189a      	adds	r2, r3, r2
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	0019      	movs	r1, r3
 8002946:	0010      	movs	r0, r2
 8002948:	f7fd fbde 	bl	8000108 <__udivsi3>
 800294c:	0003      	movs	r3, r0
 800294e:	b29b      	uxth	r3, r3
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002952:	e028      	b.n	80029a6 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002954:	f7ff fb44 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8002958:	0002      	movs	r2, r0
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	18d2      	adds	r2, r2, r3
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	0019      	movs	r1, r3
 8002968:	0010      	movs	r0, r2
 800296a:	f7fd fbcd 	bl	8000108 <__udivsi3>
 800296e:	0003      	movs	r3, r0
 8002970:	b29b      	uxth	r3, r3
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002974:	e017      	b.n	80029a6 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	2280      	movs	r2, #128	; 0x80
 800297e:	0212      	lsls	r2, r2, #8
 8002980:	189a      	adds	r2, r3, r2
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	0019      	movs	r1, r3
 8002988:	0010      	movs	r0, r2
 800298a:	f7fd fbbd 	bl	8000108 <__udivsi3>
 800298e:	0003      	movs	r3, r0
 8002990:	b29b      	uxth	r3, r3
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002994:	e007      	b.n	80029a6 <UART_SetConfig+0x55a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002996:	2313      	movs	r3, #19
 8002998:	2218      	movs	r2, #24
 800299a:	4694      	mov	ip, r2
 800299c:	44bc      	add	ip, r7
 800299e:	4463      	add	r3, ip
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
        break;
 80029a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	2b0f      	cmp	r3, #15
 80029aa:	d908      	bls.n	80029be <UART_SetConfig+0x572>
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ae:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <UART_SetConfig+0x5a0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d804      	bhi.n	80029be <UART_SetConfig+0x572>
    {
      huart->Instance->BRR = usartdiv;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ba:	60da      	str	r2, [r3, #12]
 80029bc:	e006      	b.n	80029cc <UART_SetConfig+0x580>
    }
    else
    {
      ret = HAL_ERROR;
 80029be:	2313      	movs	r3, #19
 80029c0:	2218      	movs	r2, #24
 80029c2:	4694      	mov	ip, r2
 80029c4:	44bc      	add	ip, r7
 80029c6:	4463      	add	r3, ip
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2200      	movs	r2, #0
 80029d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	2200      	movs	r2, #0
 80029d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80029d8:	2313      	movs	r3, #19
 80029da:	2218      	movs	r2, #24
 80029dc:	4694      	mov	ip, r2
 80029de:	44bc      	add	ip, r7
 80029e0:	4463      	add	r3, ip
 80029e2:	781b      	ldrb	r3, [r3, #0]
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b00e      	add	sp, #56	; 0x38
 80029ea:	bdb0      	pop	{r4, r5, r7, pc}
 80029ec:	0000ffff 	.word	0x0000ffff
 80029f0:	08002d40 	.word	0x08002d40
 80029f4:	40021000 	.word	0x40021000
 80029f8:	003d0900 	.word	0x003d0900
 80029fc:	00f42400 	.word	0x00f42400

08002a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d00b      	beq.n	8002a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a4a      	ldr	r2, [pc, #296]	; (8002b44 <UART_AdvFeatureConfig+0x144>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	2202      	movs	r2, #2
 8002a30:	4013      	ands	r3, r2
 8002a32:	d00b      	beq.n	8002a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4a43      	ldr	r2, [pc, #268]	; (8002b48 <UART_AdvFeatureConfig+0x148>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	0019      	movs	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	2204      	movs	r2, #4
 8002a52:	4013      	ands	r3, r2
 8002a54:	d00b      	beq.n	8002a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a3b      	ldr	r2, [pc, #236]	; (8002b4c <UART_AdvFeatureConfig+0x14c>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2208      	movs	r2, #8
 8002a74:	4013      	ands	r3, r2
 8002a76:	d00b      	beq.n	8002a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4a34      	ldr	r2, [pc, #208]	; (8002b50 <UART_AdvFeatureConfig+0x150>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	2210      	movs	r2, #16
 8002a96:	4013      	ands	r3, r2
 8002a98:	d00b      	beq.n	8002ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a2c      	ldr	r2, [pc, #176]	; (8002b54 <UART_AdvFeatureConfig+0x154>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d00b      	beq.n	8002ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	4a25      	ldr	r2, [pc, #148]	; (8002b58 <UART_AdvFeatureConfig+0x158>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	2240      	movs	r2, #64	; 0x40
 8002ada:	4013      	ands	r3, r2
 8002adc:	d01d      	beq.n	8002b1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <UART_AdvFeatureConfig+0x15c>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	0019      	movs	r1, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	035b      	lsls	r3, r3, #13
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d10b      	bne.n	8002b1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a15      	ldr	r2, [pc, #84]	; (8002b60 <UART_AdvFeatureConfig+0x160>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2280      	movs	r2, #128	; 0x80
 8002b20:	4013      	ands	r3, r2
 8002b22:	d00b      	beq.n	8002b3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <UART_AdvFeatureConfig+0x164>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	605a      	str	r2, [r3, #4]
  }
}
 8002b3c:	46c0      	nop			; (mov r8, r8)
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b002      	add	sp, #8
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	fffdffff 	.word	0xfffdffff
 8002b48:	fffeffff 	.word	0xfffeffff
 8002b4c:	fffbffff 	.word	0xfffbffff
 8002b50:	ffff7fff 	.word	0xffff7fff
 8002b54:	ffffefff 	.word	0xffffefff
 8002b58:	ffffdfff 	.word	0xffffdfff
 8002b5c:	ffefffff 	.word	0xffefffff
 8002b60:	ff9fffff 	.word	0xff9fffff
 8002b64:	fff7ffff 	.word	0xfff7ffff

08002b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002b76:	f7fd ff5b 	bl	8000a30 <HAL_GetTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2208      	movs	r2, #8
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d10d      	bne.n	8002ba8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	0399      	lsls	r1, r3, #14
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <UART_CheckIdleState+0x88>)
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	0013      	movs	r3, r2
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f000 f82a 	bl	8002bf4 <UART_WaitOnFlagUntilTimeout>
 8002ba0:	1e03      	subs	r3, r0, #0
 8002ba2:	d001      	beq.n	8002ba8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e01f      	b.n	8002be8 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2204      	movs	r2, #4
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d10d      	bne.n	8002bd2 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	03d9      	lsls	r1, r3, #15
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <UART_CheckIdleState+0x88>)
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	0013      	movs	r3, r2
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f000 f815 	bl	8002bf4 <UART_WaitOnFlagUntilTimeout>
 8002bca:	1e03      	subs	r3, r0, #0
 8002bcc:	d001      	beq.n	8002bd2 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e00a      	b.n	8002be8 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2270      	movs	r2, #112	; 0x70
 8002be2:	2100      	movs	r1, #0
 8002be4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	0018      	movs	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b004      	add	sp, #16
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	01ffffff 	.word	0x01ffffff

08002bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	1dfb      	adds	r3, r7, #7
 8002c02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c04:	e029      	b.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	d026      	beq.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0c:	f7fd ff10 	bl	8000a30 <HAL_GetTick>
 8002c10:	0002      	movs	r2, r0
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d302      	bcc.n	8002c22 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d11b      	bne.n	8002c5a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4915      	ldr	r1, [pc, #84]	; (8002c84 <UART_WaitOnFlagUntilTimeout+0x90>)
 8002c2e:	400a      	ands	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	438a      	bics	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2220      	movs	r2, #32
 8002c46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2270      	movs	r2, #112	; 0x70
 8002c52:	2100      	movs	r1, #0
 8002c54:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e00f      	b.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	4013      	ands	r3, r2
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	425a      	negs	r2, r3
 8002c6a:	4153      	adcs	r3, r2
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	001a      	movs	r2, r3
 8002c70:	1dfb      	adds	r3, r7, #7
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d0c6      	beq.n	8002c06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b004      	add	sp, #16
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	fffffe5f 	.word	0xfffffe5f

08002c88 <__libc_init_array>:
 8002c88:	b570      	push	{r4, r5, r6, lr}
 8002c8a:	2600      	movs	r6, #0
 8002c8c:	4d0c      	ldr	r5, [pc, #48]	; (8002cc0 <__libc_init_array+0x38>)
 8002c8e:	4c0d      	ldr	r4, [pc, #52]	; (8002cc4 <__libc_init_array+0x3c>)
 8002c90:	1b64      	subs	r4, r4, r5
 8002c92:	10a4      	asrs	r4, r4, #2
 8002c94:	42a6      	cmp	r6, r4
 8002c96:	d109      	bne.n	8002cac <__libc_init_array+0x24>
 8002c98:	2600      	movs	r6, #0
 8002c9a:	f000 f821 	bl	8002ce0 <_init>
 8002c9e:	4d0a      	ldr	r5, [pc, #40]	; (8002cc8 <__libc_init_array+0x40>)
 8002ca0:	4c0a      	ldr	r4, [pc, #40]	; (8002ccc <__libc_init_array+0x44>)
 8002ca2:	1b64      	subs	r4, r4, r5
 8002ca4:	10a4      	asrs	r4, r4, #2
 8002ca6:	42a6      	cmp	r6, r4
 8002ca8:	d105      	bne.n	8002cb6 <__libc_init_array+0x2e>
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
 8002cac:	00b3      	lsls	r3, r6, #2
 8002cae:	58eb      	ldr	r3, [r5, r3]
 8002cb0:	4798      	blx	r3
 8002cb2:	3601      	adds	r6, #1
 8002cb4:	e7ee      	b.n	8002c94 <__libc_init_array+0xc>
 8002cb6:	00b3      	lsls	r3, r6, #2
 8002cb8:	58eb      	ldr	r3, [r5, r3]
 8002cba:	4798      	blx	r3
 8002cbc:	3601      	adds	r6, #1
 8002cbe:	e7f2      	b.n	8002ca6 <__libc_init_array+0x1e>
 8002cc0:	08002d6c 	.word	0x08002d6c
 8002cc4:	08002d6c 	.word	0x08002d6c
 8002cc8:	08002d6c 	.word	0x08002d6c
 8002ccc:	08002d70 	.word	0x08002d70

08002cd0 <memset>:
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	1812      	adds	r2, r2, r0
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d100      	bne.n	8002cda <memset+0xa>
 8002cd8:	4770      	bx	lr
 8002cda:	7019      	strb	r1, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	e7f9      	b.n	8002cd4 <memset+0x4>

08002ce0 <_init>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr

08002cec <_fini>:
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf2:	bc08      	pop	{r3}
 8002cf4:	469e      	mov	lr, r3
 8002cf6:	4770      	bx	lr
